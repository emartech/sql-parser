#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.0
# from Racc grammar file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 381)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    57,   121,   121,   102,   218,   261,   227,   120,   120,    43,
    83,    93,   284,    71,   141,    13,   270,    15,    72,   -93,
    25,    27,   271,   213,   214,   -93,   215,   216,   217,    16,
    57,    85,    85,   219,   220,   221,   222,   223,    85,    43,
   229,   103,    36,   229,    32,    32,    32,   144,   145,    97,
    25,    33,    22,   230,    76,    23,    59,    60,    57,    48,
    51,    53,    54,    55,    56,    58,    61,    43,    64,    65,
    66,    68,    36,    77,    32,    79,    80,    69,    81,    82,
    73,    33,   137,    22,    76,    22,    59,    60,    57,    48,
    51,    53,    54,    55,    56,    58,    61,    43,    64,    65,
    66,    68,    32,    77,    89,    79,    80,    91,    81,    82,
   252,   253,    97,    92,    59,    60,    76,    48,    51,    53,
    54,    55,    56,    58,    61,    57,    64,    65,    66,    68,
   100,   101,    32,   -93,    43,    77,   106,    79,    80,   107,
    81,    82,   262,   108,   263,   264,   109,    48,    51,    53,
    54,    55,    56,    58,    61,    57,    64,    65,    66,    68,
   206,   207,   148,   110,    43,   113,     9,    36,    10,    32,
    11,   112,   111,   114,    12,   115,    33,   191,   192,    85,
    22,    59,    60,   130,    48,    51,    53,    54,    55,    56,
    58,    61,    57,    64,    65,    66,    68,    36,   131,    32,
   132,   150,   133,   134,    85,   137,    33,    22,    85,   148,
   174,    59,    60,   179,    48,    51,    53,    54,    55,    56,
    58,    61,    57,    64,    65,    66,    68,   186,   158,   187,
   188,    43,   189,   125,    36,   153,   154,   196,   137,   198,
   199,    22,    22,    33,   204,   224,   228,    85,    59,    60,
   233,    48,    51,    53,    54,    55,    56,    58,    61,    57,
    64,    65,    66,    68,    36,   234,    32,   235,    43,   236,
   237,   238,   239,    33,   240,   242,   243,    85,    59,    60,
   229,    48,    51,    53,    54,    55,    56,    58,    61,    57,
    64,    65,    66,    68,   255,   256,   257,   259,    43,   260,
   179,    36,   266,    32,    12,   285,   286,   288,   289,   291,
    33,    32,   296,   266,   301,    59,    60,    57,    48,    51,
    53,    54,    55,    56,    58,    61,    43,    64,    65,    66,
    68,   303,   304,    32,   305,   228,   307,   229,    85,   229,
   312,   313,   315,   317,   318,    59,    60,    57,    48,    51,
    53,    54,    55,    56,    58,    61,    43,    64,    65,    66,
    68,    32,   319,   320,    32,   323,    85,   180,   nil,   nil,
   nil,   nil,   nil,    59,    60,   nil,    48,    51,    53,    54,
    55,    56,    58,    61,    57,    64,    65,    66,    68,    36,
   nil,    32,   nil,    43,   nil,   nil,   nil,   nil,    33,   nil,
   nil,   nil,   nil,    59,    60,   nil,    48,    51,    53,    54,
    55,    56,    58,    61,    57,    64,    65,    66,    68,   nil,
   nil,   nil,   nil,    43,   nil,   nil,    36,   nil,    32,   nil,
   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,
    59,    60,   nil,    48,    51,    53,    54,    55,    56,    58,
    61,    57,    64,    65,    66,    68,    36,   nil,    32,   nil,
    43,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,
    59,    60,   nil,    48,    51,    53,    54,    55,    56,    58,
    61,    57,    64,    65,    66,    68,   nil,   nil,   nil,   nil,
    43,   nil,   nil,    36,   nil,    32,   nil,   nil,   nil,   nil,
   nil,   nil,    33,   nil,   nil,   nil,   nil,    59,    60,   nil,
    48,    51,    53,    54,    55,    56,    58,    61,    57,    64,
    65,    66,    68,    36,   nil,    32,   nil,    43,   nil,   nil,
   nil,   nil,    33,   nil,   nil,   nil,   nil,    59,    60,   nil,
    48,    51,    53,    54,    55,    56,    58,    61,   nil,    64,
    65,    66,    68,   nil,    57,   nil,   nil,   nil,   nil,   nil,
    36,   nil,    32,   150,   nil,   nil,   nil,   nil,   nil,    33,
   nil,   nil,   nil,   nil,    59,    60,   nil,    48,    51,    53,
    54,    55,    56,    58,    61,    57,    64,    65,    66,    68,
   158,   nil,   nil,   nil,    43,   nil,    36,   153,   154,   nil,
   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,
    59,    60,   nil,    48,    51,    53,    54,    55,    56,    58,
    61,    57,    64,    65,    66,    68,   nil,    36,   nil,    32,
    43,   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,
   nil,    59,    60,   nil,    48,    51,    53,    54,    55,    56,
    58,    61,    57,    64,    65,    66,    68,   nil,   nil,   nil,
   nil,   150,   nil,    36,   nil,    32,   nil,   nil,   nil,   nil,
   nil,    12,    33,   nil,   nil,   nil,   nil,    59,    60,   nil,
    48,    51,    53,    54,    55,    56,    58,    61,   158,    64,
    65,    66,    68,    57,    36,   153,   154,   nil,   nil,   nil,
   nil,   nil,   150,    33,   nil,   nil,    76,   nil,    59,    60,
   124,    48,    51,    53,    54,    55,    56,    58,    61,   125,
    64,    65,    66,    68,    57,    77,   nil,    79,    80,   nil,
    81,    82,   nil,    43,   nil,    36,   153,   231,   nil,   nil,
   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    59,
    60,   nil,    48,    51,    53,    54,    55,    56,    58,    61,
    57,    64,    65,    66,    68,   nil,    36,   nil,    32,   247,
   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,
    59,    60,   nil,    48,    51,    53,    54,    55,    56,    58,
    61,    57,    64,    65,    66,    68,   nil,   nil,   nil,   nil,
    43,   nil,    36,   nil,   231,   nil,   nil,   nil,   nil,   nil,
   nil,    33,   nil,   nil,   nil,   nil,    59,    60,   nil,    48,
    51,    53,    54,    55,    56,    58,    61,    57,    64,    65,
    66,    68,   nil,    36,   nil,    32,   247,   nil,   nil,   nil,
   nil,   nil,    33,   nil,   nil,   nil,   nil,    59,    60,   nil,
    48,    51,    53,    54,    55,    56,    58,    61,    57,    64,
    65,    66,    68,   nil,   nil,   nil,   nil,   247,   nil,    36,
   nil,   231,   nil,   nil,   nil,   nil,   nil,   nil,    33,   nil,
   nil,   nil,   nil,    59,    60,   nil,    48,    51,    53,    54,
    55,    56,    58,    61,    57,    64,    65,    66,    68,   nil,
    36,   nil,   231,   247,   nil,   nil,   nil,   nil,   nil,    33,
   nil,   nil,   nil,   nil,    59,    60,   nil,    48,    51,    53,
    54,    55,    56,    58,    61,    57,    64,    65,    66,    68,
   nil,   nil,   nil,   nil,   247,   nil,    36,   nil,   231,   nil,
   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,
    59,    60,   nil,    48,    51,    53,    54,    55,    56,    58,
    61,    57,    64,    65,    66,    68,   nil,    36,   nil,   231,
   247,   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,
   nil,    59,    60,   nil,    48,    51,    53,    54,    55,    56,
    58,    61,    57,    64,    65,    66,    68,   nil,   nil,   nil,
   nil,   247,   nil,    36,   nil,   231,   nil,   nil,   nil,   nil,
   nil,   nil,    33,   nil,   nil,   nil,   nil,    59,    60,   nil,
    48,    51,    53,    54,    55,    56,    58,    61,    57,    64,
    65,    66,    68,   nil,    36,   nil,   231,   247,   nil,   nil,
   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    59,    60,
   nil,    48,    51,    53,    54,    55,    56,    58,    61,    57,
    64,    65,    66,    68,   nil,   nil,   nil,   nil,   247,   nil,
    36,   nil,   231,   nil,   nil,   nil,   nil,   nil,   nil,    33,
   nil,   nil,   nil,   nil,    59,    60,   nil,    48,    51,    53,
    54,    55,    56,    58,    61,    57,    64,    65,    66,    68,
   nil,    36,   nil,   231,    43,   278,   nil,   nil,   nil,   nil,
    33,   nil,   nil,   nil,   nil,    59,    60,   nil,    48,    51,
    53,    54,    55,    56,    58,    61,    57,    64,    65,    66,
    68,   nil,   nil,   nil,   nil,   150,   nil,    36,   nil,    32,
   nil,   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,
   nil,    59,    60,   nil,    48,    51,    53,    54,    55,    56,
    58,    61,   158,    64,    65,    66,    68,    57,    36,   153,
   154,   nil,   nil,   nil,   nil,   nil,   150,    33,   nil,   nil,
   nil,   nil,    59,    60,   nil,    48,    51,    53,    54,    55,
    56,    58,    61,   nil,    64,    65,    66,    68,    57,   nil,
   nil,   nil,   nil,   158,   nil,   nil,   nil,    43,   nil,    36,
   153,   154,   nil,   nil,   nil,   nil,   nil,   nil,    33,   nil,
   nil,   nil,   nil,    59,    60,   nil,    48,    51,    53,    54,
    55,    56,    58,    61,    57,    64,    65,    66,    68,   nil,
    36,   nil,    32,    43,   nil,   nil,   nil,   nil,   nil,    33,
   nil,   nil,   nil,   nil,    59,    60,   nil,    48,    51,    53,
    54,    55,    56,    58,    61,    57,    64,    65,    66,    68,
   nil,   nil,   nil,   nil,    43,   nil,    36,   nil,    32,   nil,
   nil,   nil,   nil,   nil,    12,    33,   nil,   nil,   nil,   nil,
    59,    60,   nil,    48,    51,    53,    54,    55,    56,    58,
    61,    57,    64,    65,    66,    68,   nil,    36,   nil,    32,
   150,   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,
   nil,    59,    60,   nil,    48,    51,    53,    54,    55,    56,
    58,    61,    57,    64,    65,    66,    68,   158,   nil,   nil,
   nil,   150,   nil,    36,   153,   154,   nil,   nil,   nil,   nil,
   nil,   nil,    33,   nil,   nil,   nil,   nil,    59,    60,   nil,
    48,    51,    53,    54,    55,    56,    58,    61,   158,    64,
    65,    66,    68,    57,    36,   153,   154,   nil,   nil,   nil,
   nil,   nil,    43,    33,   nil,   nil,   nil,   nil,    59,    60,
   nil,    48,    51,    53,    54,    55,    56,    58,    61,   nil,
    64,    65,    66,    68,    57,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   247,   nil,    36,   nil,    32,   nil,   nil,
   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    59,
    60,   nil,    48,    51,    53,    54,    55,    56,    58,    61,
    57,    64,    65,    66,    68,   nil,    36,   nil,   231,   247,
   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,
    59,    60,   nil,    48,    51,    53,    54,    55,    56,    58,
    61,    57,    64,    65,    66,    68,   nil,   nil,   nil,   nil,
    43,   nil,    36,   nil,   231,   nil,   nil,   nil,   nil,   nil,
    12,    33,   nil,   nil,   nil,   nil,    59,    60,   nil,    48,
    51,    53,    54,    55,    56,    58,    61,    57,    64,    65,
    66,    68,   nil,    36,   nil,    32,    43,   278,   nil,   nil,
   nil,   nil,    33,   nil,   nil,   nil,   nil,    59,    60,   nil,
    48,    51,    53,    54,    55,    56,    58,    61,    57,    64,
    65,    66,    68,   nil,   nil,   nil,   nil,    43,   nil,    36,
   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,    33,   nil,
   nil,   nil,   nil,    59,    60,   nil,    48,    51,    53,    54,
    55,    56,    58,    61,    57,    64,    65,    66,    68,   nil,
    36,   nil,    32,   247,   nil,   nil,   nil,   nil,   nil,    33,
   nil,   nil,   nil,   nil,    59,    60,   nil,    48,    51,    53,
    54,    55,    56,    58,    61,    57,    64,    65,    66,    68,
   nil,   nil,   nil,   nil,    43,   nil,    36,   nil,   231,   nil,
   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,
    59,    60,   nil,    48,    51,    53,    54,    55,    56,    58,
    61,    57,    64,    65,    66,    68,   nil,    36,   nil,    32,
   247,   nil,   nil,   nil,   nil,   nil,    33,   nil,  -163,   nil,
   nil,    59,    60,   nil,    48,    51,    53,    54,    55,    56,
    58,    61,   nil,    64,    65,    66,    68,  -163,  -163,   nil,
  -163,  -163,  -163,    36,   nil,   231,   nil,  -163,  -163,  -163,
  -163,  -163,    33,   nil,   nil,   nil,  -175,    59,    60,  -175,
    48,    51,    53,    54,    55,    56,    58,    61,   nil,    64,
    65,    66,    68,   nil,   nil,  -175,  -175,   nil,  -175,  -175,
  -175,    76,   nil,   nil,   nil,  -175,  -175,  -175,  -175,  -175,
    75,   nil,   nil,   nil,   nil,  -175,  -175,  -175,   nil,   nil,
    77,   nil,    79,    80,   nil,    81,    82 ]

racc_action_check = [
    12,    73,   189,    37,   152,   211,   154,    73,   189,    12,
    18,    31,   231,    14,    92,     1,   217,     7,    14,   154,
    12,    12,   217,   152,   152,   231,   152,   152,   152,     9,
    27,    18,    31,   152,   152,   152,   152,   152,    92,    27,
   211,    37,    12,   156,    12,    73,   189,    95,    95,    95,
    27,    12,    10,   156,    86,    11,    12,    12,    33,    12,
    12,    12,    12,    12,    12,    12,    12,    33,    12,    12,
    12,    12,    27,    86,    27,    86,    86,    13,    86,    86,
    15,    27,    86,    16,   201,    23,    27,    27,    38,    27,
    27,    27,    27,    27,    27,    27,    27,    38,    27,    27,
    27,    27,    33,   201,    24,   201,   201,    29,   201,   201,
   201,   201,    33,    30,    33,    33,   139,    33,    33,    33,
    33,    33,    33,    33,    33,    43,    33,    33,    33,    33,
    34,    34,    38,    32,    43,   139,    51,   139,   139,    53,
   139,   139,   213,    54,   213,   213,    55,    38,    38,    38,
    38,    38,    38,    38,    38,    91,    38,    38,    38,    38,
   147,   147,   147,    56,    91,    68,     0,    43,     0,    43,
     0,    61,    61,    71,     0,    72,    43,   118,   118,    75,
    76,    43,    43,    77,    43,    43,    43,    43,    43,    43,
    43,    43,    97,    43,    43,    43,    43,    91,    78,    91,
    80,    97,    81,    82,    83,    88,    91,    89,    93,    96,
    99,    91,    91,   105,    91,    91,    91,    91,    91,    91,
    91,    91,   100,    91,    91,    91,    91,   111,    97,   114,
   115,   100,   116,   123,    97,    97,    97,   125,   126,   127,
   128,   130,   131,    97,   138,   153,   155,   174,    97,    97,
   180,    97,    97,    97,    97,    97,    97,    97,    97,   101,
    97,    97,    97,    97,   100,   181,   100,   182,   101,   183,
   184,   185,   187,   100,   188,   194,   195,   198,   100,   100,
   202,   100,   100,   100,   100,   100,   100,   100,   100,   102,
   100,   100,   100,   100,   203,   204,   205,   209,   102,   210,
   212,   101,   215,   101,   224,   239,   240,   244,   245,   253,
   101,   256,   258,   263,   265,   101,   101,   103,   101,   101,
   101,   101,   101,   101,   101,   101,   103,   101,   101,   101,
   101,   270,   279,   102,   280,   282,   286,   290,   291,   292,
   293,   298,   302,   306,   307,   102,   102,   106,   102,   102,
   102,   102,   102,   102,   102,   102,   106,   102,   102,   102,
   102,   103,   309,   310,   312,   318,   320,   106,   nil,   nil,
   nil,   nil,   nil,   103,   103,   nil,   103,   103,   103,   103,
   103,   103,   103,   103,   107,   103,   103,   103,   103,   106,
   nil,   106,   nil,   107,   nil,   nil,   nil,   nil,   106,   nil,
   nil,   nil,   nil,   106,   106,   nil,   106,   106,   106,   106,
   106,   106,   106,   106,   108,   106,   106,   106,   106,   nil,
   nil,   nil,   nil,   108,   nil,   nil,   107,   nil,   107,   nil,
   nil,   nil,   nil,   nil,   nil,   107,   nil,   nil,   nil,   nil,
   107,   107,   nil,   107,   107,   107,   107,   107,   107,   107,
   107,   109,   107,   107,   107,   107,   108,   nil,   108,   nil,
   109,   nil,   nil,   nil,   nil,   108,   nil,   nil,   nil,   nil,
   108,   108,   nil,   108,   108,   108,   108,   108,   108,   108,
   108,   110,   108,   108,   108,   108,   nil,   nil,   nil,   nil,
   110,   nil,   nil,   109,   nil,   109,   nil,   nil,   nil,   nil,
   nil,   nil,   109,   nil,   nil,   nil,   nil,   109,   109,   nil,
   109,   109,   109,   109,   109,   109,   109,   109,   124,   109,
   109,   109,   109,   110,   nil,   110,   nil,   124,   nil,   nil,
   nil,   nil,   110,   nil,   nil,   nil,   nil,   110,   110,   nil,
   110,   110,   110,   110,   110,   110,   110,   110,   nil,   110,
   110,   110,   110,   nil,   137,   nil,   nil,   nil,   nil,   nil,
   124,   nil,   124,   137,   nil,   nil,   nil,   nil,   nil,   124,
   nil,   nil,   nil,   nil,   124,   124,   nil,   124,   124,   124,
   124,   124,   124,   124,   124,   145,   124,   124,   124,   124,
   137,   nil,   nil,   nil,   145,   nil,   137,   137,   137,   nil,
   nil,   nil,   nil,   nil,   nil,   137,   nil,   nil,   nil,   nil,
   137,   137,   nil,   137,   137,   137,   137,   137,   137,   137,
   137,   148,   137,   137,   137,   137,   nil,   145,   nil,   145,
   148,   nil,   nil,   nil,   nil,   nil,   145,   nil,   nil,   nil,
   nil,   145,   145,   nil,   145,   145,   145,   145,   145,   145,
   145,   145,   150,   145,   145,   145,   145,   nil,   nil,   nil,
   nil,   150,   nil,   148,   nil,   148,   nil,   nil,   nil,   nil,
   nil,   150,   148,   nil,   nil,   nil,   nil,   148,   148,   nil,
   148,   148,   148,   148,   148,   148,   148,   148,   150,   148,
   148,   148,   148,   158,   150,   150,   150,   nil,   nil,   nil,
   nil,   nil,   158,   150,   nil,   nil,    74,   nil,   150,   150,
    74,   150,   150,   150,   150,   150,   150,   150,   150,    74,
   150,   150,   150,   150,   196,    74,   nil,    74,    74,   nil,
    74,    74,   nil,   196,   nil,   158,   158,   158,   nil,   nil,
   nil,   nil,   nil,   nil,   158,   nil,   nil,   nil,   nil,   158,
   158,   nil,   158,   158,   158,   158,   158,   158,   158,   158,
   199,   158,   158,   158,   158,   nil,   196,   nil,   196,   199,
   nil,   nil,   nil,   nil,   nil,   196,   nil,   nil,   nil,   nil,
   196,   196,   nil,   196,   196,   196,   196,   196,   196,   196,
   196,   207,   196,   196,   196,   196,   nil,   nil,   nil,   nil,
   207,   nil,   199,   nil,   199,   nil,   nil,   nil,   nil,   nil,
   nil,   199,   nil,   nil,   nil,   nil,   199,   199,   nil,   199,
   199,   199,   199,   199,   199,   199,   199,   214,   199,   199,
   199,   199,   nil,   207,   nil,   207,   214,   nil,   nil,   nil,
   nil,   nil,   207,   nil,   nil,   nil,   nil,   207,   207,   nil,
   207,   207,   207,   207,   207,   207,   207,   207,   216,   207,
   207,   207,   207,   nil,   nil,   nil,   nil,   216,   nil,   214,
   nil,   214,   nil,   nil,   nil,   nil,   nil,   nil,   214,   nil,
   nil,   nil,   nil,   214,   214,   nil,   214,   214,   214,   214,
   214,   214,   214,   214,   218,   214,   214,   214,   214,   nil,
   216,   nil,   216,   218,   nil,   nil,   nil,   nil,   nil,   216,
   nil,   nil,   nil,   nil,   216,   216,   nil,   216,   216,   216,
   216,   216,   216,   216,   216,   219,   216,   216,   216,   216,
   nil,   nil,   nil,   nil,   219,   nil,   218,   nil,   218,   nil,
   nil,   nil,   nil,   nil,   nil,   218,   nil,   nil,   nil,   nil,
   218,   218,   nil,   218,   218,   218,   218,   218,   218,   218,
   218,   220,   218,   218,   218,   218,   nil,   219,   nil,   219,
   220,   nil,   nil,   nil,   nil,   nil,   219,   nil,   nil,   nil,
   nil,   219,   219,   nil,   219,   219,   219,   219,   219,   219,
   219,   219,   221,   219,   219,   219,   219,   nil,   nil,   nil,
   nil,   221,   nil,   220,   nil,   220,   nil,   nil,   nil,   nil,
   nil,   nil,   220,   nil,   nil,   nil,   nil,   220,   220,   nil,
   220,   220,   220,   220,   220,   220,   220,   220,   222,   220,
   220,   220,   220,   nil,   221,   nil,   221,   222,   nil,   nil,
   nil,   nil,   nil,   221,   nil,   nil,   nil,   nil,   221,   221,
   nil,   221,   221,   221,   221,   221,   221,   221,   221,   223,
   221,   221,   221,   221,   nil,   nil,   nil,   nil,   223,   nil,
   222,   nil,   222,   nil,   nil,   nil,   nil,   nil,   nil,   222,
   nil,   nil,   nil,   nil,   222,   222,   nil,   222,   222,   222,
   222,   222,   222,   222,   222,   227,   222,   222,   222,   222,
   nil,   223,   nil,   223,   227,   227,   nil,   nil,   nil,   nil,
   223,   nil,   nil,   nil,   nil,   223,   223,   nil,   223,   223,
   223,   223,   223,   223,   223,   223,   228,   223,   223,   223,
   223,   nil,   nil,   nil,   nil,   228,   nil,   227,   nil,   227,
   nil,   nil,   nil,   nil,   nil,   nil,   227,   nil,   nil,   nil,
   nil,   227,   227,   nil,   227,   227,   227,   227,   227,   227,
   227,   227,   228,   227,   227,   227,   227,   229,   228,   228,
   228,   nil,   nil,   nil,   nil,   nil,   229,   228,   nil,   nil,
   nil,   nil,   228,   228,   nil,   228,   228,   228,   228,   228,
   228,   228,   228,   nil,   228,   228,   228,   228,   230,   nil,
   nil,   nil,   nil,   229,   nil,   nil,   nil,   230,   nil,   229,
   229,   229,   nil,   nil,   nil,   nil,   nil,   nil,   229,   nil,
   nil,   nil,   nil,   229,   229,   nil,   229,   229,   229,   229,
   229,   229,   229,   229,   243,   229,   229,   229,   229,   nil,
   230,   nil,   230,   243,   nil,   nil,   nil,   nil,   nil,   230,
   nil,   nil,   nil,   nil,   230,   230,   nil,   230,   230,   230,
   230,   230,   230,   230,   230,   247,   230,   230,   230,   230,
   nil,   nil,   nil,   nil,   247,   nil,   243,   nil,   243,   nil,
   nil,   nil,   nil,   nil,   247,   243,   nil,   nil,   nil,   nil,
   243,   243,   nil,   243,   243,   243,   243,   243,   243,   243,
   243,   252,   243,   243,   243,   243,   nil,   247,   nil,   247,
   252,   nil,   nil,   nil,   nil,   nil,   247,   nil,   nil,   nil,
   nil,   247,   247,   nil,   247,   247,   247,   247,   247,   247,
   247,   247,   255,   247,   247,   247,   247,   252,   nil,   nil,
   nil,   255,   nil,   252,   252,   252,   nil,   nil,   nil,   nil,
   nil,   nil,   252,   nil,   nil,   nil,   nil,   252,   252,   nil,
   252,   252,   252,   252,   252,   252,   252,   252,   255,   252,
   252,   252,   252,   259,   255,   255,   255,   nil,   nil,   nil,
   nil,   nil,   259,   255,   nil,   nil,   nil,   nil,   255,   255,
   nil,   255,   255,   255,   255,   255,   255,   255,   255,   nil,
   255,   255,   255,   255,   262,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   262,   nil,   259,   nil,   259,   nil,   nil,
   nil,   nil,   nil,   nil,   259,   nil,   nil,   nil,   nil,   259,
   259,   nil,   259,   259,   259,   259,   259,   259,   259,   259,
   264,   259,   259,   259,   259,   nil,   262,   nil,   262,   264,
   nil,   nil,   nil,   nil,   nil,   262,   nil,   nil,   nil,   nil,
   262,   262,   nil,   262,   262,   262,   262,   262,   262,   262,
   262,   266,   262,   262,   262,   262,   nil,   nil,   nil,   nil,
   266,   nil,   264,   nil,   264,   nil,   nil,   nil,   nil,   nil,
   266,   264,   nil,   nil,   nil,   nil,   264,   264,   nil,   264,
   264,   264,   264,   264,   264,   264,   264,   284,   264,   264,
   264,   264,   nil,   266,   nil,   266,   284,   284,   nil,   nil,
   nil,   nil,   266,   nil,   nil,   nil,   nil,   266,   266,   nil,
   266,   266,   266,   266,   266,   266,   266,   266,   289,   266,
   266,   266,   266,   nil,   nil,   nil,   nil,   289,   nil,   284,
   nil,   284,   nil,   nil,   nil,   nil,   nil,   nil,   284,   nil,
   nil,   nil,   nil,   284,   284,   nil,   284,   284,   284,   284,
   284,   284,   284,   284,   301,   284,   284,   284,   284,   nil,
   289,   nil,   289,   301,   nil,   nil,   nil,   nil,   nil,   289,
   nil,   nil,   nil,   nil,   289,   289,   nil,   289,   289,   289,
   289,   289,   289,   289,   289,   305,   289,   289,   289,   289,
   nil,   nil,   nil,   nil,   305,   nil,   301,   nil,   301,   nil,
   nil,   nil,   nil,   nil,   nil,   301,   nil,   nil,   nil,   nil,
   301,   301,   nil,   301,   301,   301,   301,   301,   301,   301,
   301,   313,   301,   301,   301,   301,   nil,   305,   nil,   305,
   313,   nil,   nil,   nil,   nil,   nil,   305,   nil,   304,   nil,
   nil,   305,   305,   nil,   305,   305,   305,   305,   305,   305,
   305,   305,   nil,   305,   305,   305,   305,   304,   304,   nil,
   304,   304,   304,   313,   nil,   313,   nil,   304,   304,   304,
   304,   304,   313,   nil,   nil,   nil,   163,   313,   313,   163,
   313,   313,   313,   313,   313,   313,   313,   313,   nil,   313,
   313,   313,   313,   nil,   nil,   163,   163,   nil,   163,   163,
   163,    17,   nil,   nil,   nil,   163,   163,   163,   163,   163,
    17,   nil,   nil,   nil,   nil,   163,   163,   163,   nil,   nil,
    17,   nil,    17,    17,   nil,    17,    17 ]

racc_action_pointer = [
   149,    15,   nil,   nil,   nil,   nil,   nil,    15,   nil,    11,
     2,    33,    -6,    77,     9,    77,    33,  1710,   -19,   nil,
   nil,   nil,   nil,    35,    82,   nil,   nil,    24,   nil,    96,
    85,   -18,   105,    52,    68,   nil,   nil,   -23,    82,   nil,
   nil,   nil,   nil,   119,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   121,   nil,   124,   128,   131,   148,   nil,   nil,   nil,
   nil,    99,   nil,   nil,   nil,   nil,   nil,   nil,    87,   nil,
   nil,   168,   169,    -5,   695,   129,   130,   152,   167,   nil,
   166,   168,   169,   154,   nil,   nil,    43,   nil,   166,   157,
   nil,   149,   -12,   158,   nil,   -11,   149,   186,   nil,   182,
   216,   253,   283,   311,   nil,   197,   341,   378,   408,   445,
   475,   155,   nil,   nil,   223,   223,   221,   nil,   164,   nil,
   nil,   nil,   nil,   209,   512,   222,   199,   228,   217,   nil,
   191,   192,   nil,   nil,   nil,   nil,   nil,   548,   204,   105,
   nil,   nil,   nil,   nil,   nil,   579,   nil,   102,   615,   nil,
   646,   nil,   -19,   230,    -9,   202,    -8,   nil,   687,   nil,
   nil,   nil,   nil,  1673,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   197,   nil,   nil,   nil,   nil,   nil,
   234,   249,   251,   253,   254,   255,   nil,   265,   270,    -4,
   nil,   nil,   nil,   nil,   259,   265,   718,   nil,   227,   754,
   nil,    73,   229,   253,   292,   238,   nil,   785,   nil,   236,
   283,   -11,   284,    99,   821,   287,   852,   -26,   888,   919,
   955,   986,  1022,  1053,   279,   nil,   nil,  1089,  1120,  1161,
  1192,    -3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   297,
   296,   nil,   nil,  1228,   291,   297,   nil,  1259,   nil,   nil,
   nil,   nil,  1295,   294,   nil,  1326,   261,   nil,   254,  1367,
   nil,   nil,  1398,   298,  1434,   270,  1465,   nil,   nil,   nil,
   283,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   316,
   323,   nil,   291,   nil,  1501,   nil,   330,   nil,   nil,  1532,
   286,   288,   288,   329,   nil,   nil,   nil,   nil,   297,   nil,
   nil,  1568,   326,   nil,  1635,  1599,   327,   337,   nil,   346,
   352,   nil,   314,  1635,   nil,   nil,   nil,   nil,   357,   nil,
   316,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -181,  -181,    -1,    -2,    -3,    -4,    -5,    -7,   -22,  -181,
  -181,  -181,  -181,  -181,    -9,  -181,  -181,  -181,   -50,   -51,
   -53,   -54,   -93,  -181,   -35,   -36,   -37,  -181,   -39,   -41,
  -181,   -45,  -171,  -181,  -135,  -136,  -137,  -140,  -181,  -142,
  -143,  -144,  -145,  -181,  -147,  -148,  -149,  -150,  -151,  -153,
  -154,  -181,  -156,  -181,  -181,  -181,  -181,  -167,  -168,  -169,
  -170,  -181,  -174,  -175,  -176,  -177,  -178,  -179,  -181,   325,
    -6,  -181,  -181,  -181,  -181,  -181,  -181,  -181,  -181,   -58,
   -60,   -62,   -63,  -181,   -49,  -171,   -70,   -34,   -70,  -181,
   -38,  -181,  -181,  -181,   -44,  -181,  -181,  -181,  -131,  -181,
  -181,  -181,  -181,  -181,  -141,  -181,  -181,  -181,  -181,  -181,
  -181,  -181,  -173,  -180,  -181,  -181,    -8,   -13,   -18,   -15,
   -16,   -17,   -23,  -181,  -181,  -181,   -70,   -28,  -181,   -55,
  -181,  -181,   -59,   -61,   -64,   -48,   -26,  -181,   -72,   -47,
   -40,   -42,  -152,   -43,  -123,  -181,  -132,  -181,  -181,  -128,
  -181,   -79,  -181,  -181,  -171,   -96,  -181,   -98,  -181,  -101,
  -102,  -103,  -104,  -106,  -107,  -108,  -109,  -110,  -111,  -112,
  -119,  -120,  -121,  -122,  -181,  -133,  -134,  -138,  -139,  -146,
  -181,  -181,  -181,  -181,  -181,  -181,  -172,  -181,  -181,  -181,
   -14,   -19,   -20,   -24,  -181,   -32,  -181,   -25,  -181,  -181,
   -56,  -181,   -71,   -77,  -181,  -181,  -125,  -181,  -129,  -181,
  -181,  -181,  -121,  -181,  -181,  -181,  -181,  -181,  -181,  -181,
  -181,  -181,  -181,  -181,  -181,   -52,   -92,  -181,  -181,  -181,
  -181,  -171,  -100,  -155,  -157,  -158,  -159,  -160,  -161,  -181,
  -181,   -12,   -30,  -181,  -181,   -87,   -27,  -181,   -29,   -57,
   -65,   -66,  -181,  -181,   -46,  -181,  -181,  -124,  -181,  -181,
   -21,  -105,  -181,  -181,  -181,  -181,  -181,   -83,   -84,   -89,
  -181,   -91,  -113,  -114,  -115,  -116,  -117,  -118,  -162,  -181,
  -165,   -99,   -97,  -130,  -181,   -10,  -181,   -31,   -33,  -181,
   -67,  -181,   -78,   -73,   -75,   -76,  -126,  -127,  -181,   -82,
   -88,  -181,  -181,   -90,  -164,  -181,  -181,  -181,   -86,  -181,
   -69,   -95,  -181,  -181,   -81,   -85,  -166,  -163,  -181,   -68,
  -181,   -74,   -80,   -11,   -94 ]

racc_goto_table = [
    84,   119,    31,   156,   126,   163,   194,   117,    17,   225,
    18,    98,   294,    94,    74,    30,    18,    31,   244,   149,
   122,    86,    28,    18,   267,     1,   279,   136,     2,   138,
    30,     3,     4,   105,     5,     6,     7,    90,    14,    70,
   116,   190,   123,   202,    24,   163,    96,    87,   140,    88,
   203,   254,   226,   249,   250,   251,   211,   128,   163,   309,
   310,   293,   282,   281,   232,   135,   163,   197,   321,   193,
   208,   225,   299,   146,   142,   143,   129,    95,   147,   104,
   nil,    31,   nil,   306,   nil,   nil,   248,   139,   302,    18,
   175,   176,   nil,   nil,    30,   nil,   181,   182,   183,   184,
   185,   265,   nil,   269,   316,   272,   273,   274,   275,   276,
   277,   308,   nil,   nil,   195,   177,   178,   119,   nil,   225,
   nil,   nil,   nil,   241,   nil,   287,   nil,   246,   nil,   201,
   200,    18,   nil,   nil,   nil,   205,   163,   163,   209,   nil,
   212,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   298,
   nil,   300,   nil,   nil,   nil,   nil,   142,   nil,   290,   nil,
   163,   292,   nil,   163,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   128,   nil,   nil,   nil,   295,   nil,   245,   nil,   314,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   258,   nil,   nil,
   322,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   280,   nil,   nil,
   283,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   195,   nil,   nil,   nil,   105,   nil,   nil,
   295,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   297,
   nil,   nil,   nil,   nil,   nil,   nil,   245,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   311,   280,   nil,   nil,   nil,   nil,   245,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   280,   nil,   nil,   nil,   nil,
   nil,   nil,   324 ]

racc_goto_check = [
    23,    14,    26,    46,    20,    64,    25,    11,    17,    15,
    37,    73,    50,    23,    17,    33,    37,    26,    27,    72,
    18,    17,    30,    37,    54,     1,    84,    21,     2,    21,
    33,     3,     4,    26,     5,     6,     7,    30,     8,     9,
    10,    13,    19,    46,    28,    64,    70,    29,    31,    34,
    35,    36,    39,    43,    44,    45,    46,    23,    64,    47,
    48,    49,    58,    59,    60,    23,    64,    21,    50,    18,
    72,    15,    54,    73,    23,    23,    37,    69,    71,    76,
   nil,    26,   nil,    84,   nil,   nil,    24,    17,    27,    37,
    26,    26,   nil,   nil,    33,   nil,    26,    26,    26,    26,
    26,    24,   nil,    24,    84,    24,    24,    24,    24,    24,
    24,    27,   nil,   nil,    26,    70,    70,    14,   nil,    15,
   nil,   nil,   nil,    11,   nil,    25,   nil,    20,   nil,    17,
    37,    37,   nil,   nil,   nil,    26,    64,    64,    26,   nil,
    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    24,
   nil,    24,   nil,   nil,   nil,   nil,    23,   nil,    46,   nil,
    64,    46,   nil,    64,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    23,   nil,   nil,   nil,    14,   nil,    26,   nil,    24,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,
    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,
    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    26,   nil,   nil,   nil,    26,   nil,   nil,
    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,
   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    23,    26,   nil,   nil,   nil,   nil,    26,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,
   nil,   nil,    23 ]

racc_goto_pointer = [
   nil,    25,    28,    31,    32,    34,    35,    36,    31,    25,
   -33,   -66,   nil,   -77,   -72,  -144,   nil,    -2,   -54,   -32,
   -71,   -59,   nil,   -18,  -113,  -118,   -10,  -178,    32,    23,
    10,   -43,   nil,     3,    25,   -88,  -152,     0,   nil,  -101,
   nil,   nil,   nil,  -148,  -147,  -146,   -94,  -232,  -231,  -195,
  -244,   nil,   nil,   nil,  -191,   nil,   nil,   nil,  -167,  -165,
   -94,   nil,   nil,   nil,   -92,   nil,   nil,   nil,   nil,    44,
    13,   -18,   -77,   -22,   nil,   nil,    41,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  -201,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   210,   nil,   nil,
   nil,   nil,   118,   nil,    41,   151,     8,   nil,   nil,   nil,
   nil,   nil,   127,    49,   152,   nil,   172,   nil,   nil,   nil,
   nil,    26,    29,    99,   nil,   nil,   nil,    50,    19,   268,
    20,    21,    78,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   171,   165,   166,   nil,   167,   168,   169,   155,   157,
   159,   160,   161,   162,    63,   164,   170,   173,    35,   nil,
    34,   nil,   nil,   nil,    37,    38,    39,    40,    42,    44,
    45,    46,    47,    52,   nil,    62,    67 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 80, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  3, 82, :_reduce_6,
  0, 87, :_reduce_none,
  3, 87, :_reduce_8,
  0, 88, :_reduce_none,
  5, 88, :_reduce_10,
  8, 88, :_reduce_11,
  3, 89, :_reduce_12,
  1, 89, :_reduce_none,
  2, 90, :_reduce_14,
  1, 91, :_reduce_none,
  1, 91, :_reduce_16,
  1, 91, :_reduce_17,
  0, 92, :_reduce_18,
  1, 92, :_reduce_19,
  1, 92, :_reduce_20,
  3, 94, :_reduce_21,
  1, 86, :_reduce_none,
  4, 83, :_reduce_23,
  5, 83, :_reduce_24,
  5, 84, :_reduce_25,
  4, 85, :_reduce_26,
  3, 99, :_reduce_27,
  1, 99, :_reduce_28,
  3, 101, :_reduce_29,
  3, 98, :_reduce_30,
  3, 104, :_reduce_31,
  1, 104, :_reduce_none,
  4, 97, :_reduce_33,
  3, 95, :_reduce_34,
  2, 95, :_reduce_35,
  1, 109, :_reduce_36,
  1, 109, :_reduce_37,
  2, 107, :_reduce_38,
  1, 107, :_reduce_39,
  3, 110, :_reduce_40,
  1, 110, :_reduce_none,
  3, 111, :_reduce_42,
  3, 111, :_reduce_43,
  2, 111, :_reduce_44,
  1, 111, :_reduce_none,
  4, 108, :_reduce_46,
  2, 113, :_reduce_47,
  3, 96, :_reduce_48,
  2, 96, :_reduce_49,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 118, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  3, 119, :_reduce_55,
  4, 119, :_reduce_56,
  5, 120, :_reduce_57,
  1, 121, :_reduce_58,
  2, 121, :_reduce_59,
  1, 121, :_reduce_60,
  2, 121, :_reduce_61,
  1, 121, :_reduce_62,
  1, 121, :_reduce_63,
  2, 121, :_reduce_64,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  2, 123, :_reduce_67,
  4, 124, :_reduce_68,
  1, 126, :_reduce_none,
  0, 100, :_reduce_none,
  2, 100, :_reduce_71,
  0, 114, :_reduce_none,
  3, 114, :_reduce_73,
  3, 128, :_reduce_74,
  1, 128, :_reduce_none,
  1, 129, :_reduce_none,
  0, 115, :_reduce_none,
  2, 115, :_reduce_78,
  1, 130, :_reduce_none,
  6, 131, :_reduce_80,
  5, 131, :_reduce_81,
  4, 132, :_reduce_82,
  3, 132, :_reduce_83,
  1, 133, :_reduce_none,
  3, 133, :_reduce_85,
  3, 106, :_reduce_86,
  1, 106, :_reduce_none,
  4, 134, :_reduce_88,
  3, 134, :_reduce_89,
  4, 135, :_reduce_90,
  3, 135, :_reduce_91,
  2, 136, :_reduce_92,
  1, 116, :_reduce_93,
  3, 127, :_reduce_94,
  1, 127, :_reduce_none,
  1, 125, :_reduce_none,
  3, 125, :_reduce_97,
  1, 137, :_reduce_none,
  3, 137, :_reduce_99,
  2, 138, :_reduce_100,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 139, :_reduce_none,
  1, 141, :_reduce_none,
  3, 141, :_reduce_105,
  1, 141, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  3, 144, :_reduce_113,
  3, 144, :_reduce_114,
  3, 144, :_reduce_115,
  3, 144, :_reduce_116,
  3, 144, :_reduce_117,
  3, 144, :_reduce_118,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 145, :_reduce_none,
  1, 145, :_reduce_none,
  3, 147, :_reduce_123,
  5, 147, :_reduce_124,
  4, 147, :_reduce_125,
  6, 147, :_reduce_126,
  4, 151, :_reduce_127,
  1, 150, :_reduce_128,
  2, 150, :_reduce_129,
  4, 152, :_reduce_130,
  1, 148, :_reduce_131,
  2, 148, :_reduce_132,
  3, 105, :_reduce_133,
  3, 105, :_reduce_134,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_137,
  3, 149, :_reduce_138,
  3, 149, :_reduce_139,
  1, 149, :_reduce_none,
  2, 153, :_reduce_141,
  1, 153, :_reduce_none,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  3, 155, :_reduce_146,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 159, :_reduce_151,
  3, 93, :_reduce_152,
  1, 93, :_reduce_none,
  1, 112, :_reduce_none,
  4, 157, :_reduce_155,
  1, 157, :_reduce_none,
  4, 162, :_reduce_157,
  4, 162, :_reduce_158,
  4, 162, :_reduce_159,
  4, 162, :_reduce_160,
  4, 162, :_reduce_161,
  3, 146, :_reduce_162,
  4, 146, :_reduce_163,
  4, 140, :_reduce_164,
  1, 163, :_reduce_none,
  3, 163, :_reduce_166,
  1, 160, :_reduce_167,
  1, 160, :_reduce_168,
  1, 154, :_reduce_169,
  1, 154, :_reduce_170,
  1, 102, :_reduce_171,
  3, 161, :_reduce_172,
  2, 161, :_reduce_173,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_176,
  1, 143, :_reduce_177,
  1, 143, :_reduce_178,
  1, 164, :_reduce_none,
  2, 165, :_reduce_180 ]

racc_reduce_n = 181

racc_shift_n = 325

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :FETCH => 4,
  :FIRST => 5,
  :unsigned_integer => 6,
  :ROWS => 7,
  :ONLY => 8,
  :OFFSET => 9,
  :NEXT => 10,
  :comma => 11,
  :built_in_function => 12,
  :ASC => 13,
  :DESC => 14,
  :left_paren => 15,
  :right_paren => 16,
  :INSERT => 17,
  :INTO => 18,
  :UPDATE => 19,
  :SET => 20,
  :DELETE => 21,
  :FROM => 22,
  :equals_operator => 23,
  :VALUES => 24,
  :SELECT => 25,
  :asterisk => 26,
  :DISTINCT => 27,
  :period => 28,
  :AS => 29,
  :CROSS => 30,
  :JOIN => 31,
  :INNER => 32,
  :LEFT => 33,
  :OUTER => 34,
  :RIGHT => 35,
  :FULL => 36,
  :ON => 37,
  :USING => 38,
  :WHERE => 39,
  :GROUP => 40,
  :HAVING => 41,
  :NOT => 42,
  :BETWEEN => 43,
  :AND => 44,
  :IN => 45,
  :LIKE => 46,
  :IS => 47,
  :NULL => 48,
  :EXISTS => 49,
  :identifier => 50,
  :OR => 51,
  :not_equals_operator => 52,
  :less_than_operator => 53,
  :greater_than_operator => 54,
  :less_than_or_equals_operator => 55,
  :greater_than_or_equals_operator => 56,
  :CASE => 57,
  :END => 58,
  :ELSE => 59,
  :WHEN => 60,
  :THEN => 61,
  :plus_sign => 62,
  :minus_sign => 63,
  :solidus => 64,
  :CURRENT_USER => 65,
  :COUNT => 66,
  :AVG => 67,
  :MAX => 68,
  :MIN => 69,
  :SUM => 70,
  :unsigned_float => 71,
  :quote => 72,
  :character_string_literal => 73,
  :variable => 74,
  :true_literal => 75,
  :false_literal => 76,
  :DATE => 77,
  :date_string => 78 }

racc_nt_base = 79

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "FETCH",
  "FIRST",
  "unsigned_integer",
  "ROWS",
  "ONLY",
  "OFFSET",
  "NEXT",
  "comma",
  "built_in_function",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "UPDATE",
  "SET",
  "DELETE",
  "FROM",
  "equals_operator",
  "VALUES",
  "SELECT",
  "asterisk",
  "DISTINCT",
  "period",
  "AS",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "CASE",
  "END",
  "ELSE",
  "WHEN",
  "THEN",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "unsigned_float",
  "quote",
  "character_string_literal",
  "variable",
  "true_literal",
  "false_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "update_specification",
  "delete_specification",
  "query_expression",
  "order_by_clause",
  "fetch_only_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_reference",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "assign_list",
  "where_clause",
  "assign_column",
  "column_name",
  "row_value_constructor",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "distinct_select_list",
  "table_expression",
  "select_list",
  "select_sublist",
  "derived_column",
  "qualifier",
  "from_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "row_subquery",
  "between_predicate",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_function",
  "boolean_primary",
  "predicate",
  "boolean_literal",
  "comparison_predicate",
  "row_value_constructor_element",
  "general_function",
  "case_expression",
  "when_expressions",
  "term",
  "when_value_expressions",
  "when_value_expression",
  "when_expression",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "general_literal",
  "general_set_function",
  "argument_list",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 15)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1], val[2])
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.racc', 20)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2])
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'parser.racc', 24)
  def _reduce_10(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(0, val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 25)
  def _reduce_11(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(val[1], val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 28)
  def _reduce_12(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.racc', 32)
  def _reduce_14(val, _values, result)
     result = val[1].new(val[0])
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::BuiltInFunction.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 37)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Ascending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Ascending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 42)
  def _reduce_20(val, _values, result)
     result = SQLParser::Statement::Descending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1])
    result
  end
.,.,

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_24(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_25(val, _values, result)
     result = SQLParser::Statement::Update.new(val[1], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::Delete.new(val[2], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_27(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_28(val, _values, result)
     result = Array(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::AssignColumn.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_31(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 32 omitted

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_33(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_34(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::All.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_37(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_38(val, _values, result)
     result = SQLParser::Statement::Distinct.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_39(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_40(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 41 omitted

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_42(val, _values, result)
     result = SQLParser::Statement::All.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 97)
  def _reduce_43(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 98)
  def _reduce_44(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1])
    result
  end
.,.,

# reduce 45 omitted

module_eval(<<'.,.,', 'parser.racc', 102)
  def _reduce_46(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_48(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_49(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1])
    result
  end
.,.,

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_57(val, _values, result)
     result = val[1].new(val[0], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_58(val, _values, result)
     result = SQLParser::Statement::InnerJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::LeftJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_61(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 132)
  def _reduce_62(val, _values, result)
     result = SQLParser::Statement::RightJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_63(val, _values, result)
     result = SQLParser::Statement::FullJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 134)
  def _reduce_64(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin
    result
  end
.,.,

# reduce 65 omitted

# reduce 66 omitted

module_eval(<<'.,.,', 'parser.racc', 141)
  def _reduce_67(val, _values, result)
     result = SQLParser::Statement::On.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 144)
  def _reduce_68(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2])
    result
  end
.,.,

# reduce 69 omitted

# reduce 70 omitted

module_eval(<<'.,.,', 'parser.racc', 151)
  def _reduce_71(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1])
    result
  end
.,.,

# reduce 72 omitted

module_eval(<<'.,.,', 'parser.racc', 155)
  def _reduce_73(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 158)
  def _reduce_74(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_78(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1])
    result
  end
.,.,

# reduce 79 omitted

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 174)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_82(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_83(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2])
    result
  end
.,.,

# reduce 84 omitted

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::InValueList.new(Array(val[1]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_86(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 87 omitted

module_eval(<<'.,.,', 'parser.racc', 192)
  def _reduce_88(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 193)
  def _reduce_89(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 196)
  def _reduce_90(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_91(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 200)
  def _reduce_92(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 204)
  def _reduce_93(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 207)
  def _reduce_94(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 95 omitted

# reduce 96 omitted

module_eval(<<'.,.,', 'parser.racc', 213)
  def _reduce_97(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2])
    result
  end
.,.,

# reduce 98 omitted

module_eval(<<'.,.,', 'parser.racc', 218)
  def _reduce_99(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 221)
  def _reduce_100(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1])
    result
  end
.,.,

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_105(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_113(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_114(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_115(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 247)
  def _reduce_116(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_117(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_118(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2])
    result
  end
.,.,

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_123(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(nil,val[1], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_124(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(nil,val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_125(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(val[1], val[2], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 264)
  def _reduce_126(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(val[1], val[2], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 268)
  def _reduce_127(val, _values, result)
     result = SQLParser::Statement::WhenClause.new(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 271)
  def _reduce_128(val, _values, result)
     result = [ val[0] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 272)
  def _reduce_129(val, _values, result)
     result = [ *val[0], val[1] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_130(val, _values, result)
     result = SQLParser::Statement::WhenClause.new(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_131(val, _values, result)
     result = [ val[0] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 279)
  def _reduce_132(val, _values, result)
     result = [ *val[0], val[1] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_133(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_134(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2])
    result
  end
.,.,

# reduce 135 omitted

# reduce 136 omitted

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::Null.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_138(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_139(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2])
    result
  end
.,.,

# reduce 140 omitted

module_eval(<<'.,.,', 'parser.racc', 294)
  def _reduce_141(val, _values, result)
     result = val[0].new(val[1])
    result
  end
.,.,

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_146(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_151(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_152(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2])
    result
  end
.,.,

# reduce 153 omitted

# reduce 154 omitted

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_155(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new)
    result
  end
.,.,

# reduce 156 omitted

module_eval(<<'.,.,', 'parser.racc', 326)
  def _reduce_157(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_158(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_159(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_160(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 330)
  def _reduce_161(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 334)
  def _reduce_162(val, _values, result)
     result = SQLParser::Statement::FunctionCall.new(val[0], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 335)
  def _reduce_163(val, _values, result)
     result = SQLParser::Statement::FunctionCall.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 338)
  def _reduce_164(val, _values, result)
     result = SQLParser::Statement::BooleanFunction.new(val[0], val[2])
    result
  end
.,.,

# reduce 165 omitted

module_eval(<<'.,.,', 'parser.racc', 342)
  def _reduce_166(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 346)
  def _reduce_167(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 347)
  def _reduce_168(val, _values, result)
    result = SQLParser::Statement::Float.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 350)
  def _reduce_169(val, _values, result)
     result = SQLParser::Statement::UnaryPlus
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 351)
  def _reduce_170(val, _values, result)
     result = SQLParser::Statement::UnaryMinus
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 355)
  def _reduce_171(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 359)
  def _reduce_172(val, _values, result)
     result = SQLParser::Statement::String.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 360)
  def _reduce_173(val, _values, result)
     result = SQLParser::Statement::String.new('')
    result
  end
.,.,

# reduce 174 omitted

# reduce 175 omitted

module_eval(<<'.,.,', 'parser.racc', 363)
  def _reduce_176(val, _values, result)
     result = SQLParser::Statement::Variable.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 366)
  def _reduce_177(val, _values, result)
     result = SQLParser::Statement::True.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 367)
  def _reduce_178(val, _values, result)
     result = SQLParser::Statement::False.new
    result
  end
.,.,

# reduce 179 omitted

module_eval(<<'.,.,', 'parser.racc', 373)
  def _reduce_180(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module SQLParser
