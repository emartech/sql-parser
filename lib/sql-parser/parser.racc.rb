#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.0
# from Racc grammar file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 379)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    56,   120,   101,   260,   120,    75,   226,   119,   228,    42,
   119,   140,   282,    82,    13,    92,   269,    15,   229,   -93,
    25,    27,   270,    56,    76,   -93,    78,    79,    75,    80,
    81,    16,    42,   136,    84,    84,    84,    74,   228,   261,
   102,   262,   263,    25,    32,    84,    56,    76,    84,    78,
    79,    33,    80,    81,    22,    42,    58,    59,    23,    47,
    50,    52,    53,    54,    55,    57,    60,    32,    63,    64,
    65,    67,    68,     9,    33,    10,    72,    11,    22,    58,
    59,    12,    47,    50,    52,    53,    54,    55,    57,    60,
    32,    63,    64,    65,    67,    56,   143,   144,    96,    22,
    96,   217,    58,    59,    42,    47,    50,    52,    53,    54,
    55,    57,    60,    88,    63,    64,    65,    67,    56,    90,
   212,   213,    91,   214,   215,   216,   -93,    42,    99,   100,
   218,   219,   220,   221,   222,    70,   205,   206,   147,    32,
    71,    56,   111,   110,   190,   191,   105,   106,   107,   108,
    42,   109,   112,   113,    47,    50,    52,    53,    54,    55,
    57,    60,    32,    63,    64,    65,    67,   114,    84,    33,
    22,   129,   130,   131,    58,    59,   132,    47,    50,    52,
    53,    54,    55,    57,    60,    32,    63,    64,    65,    67,
    56,   133,    33,    84,   136,    75,    22,    58,    59,   149,
    47,    50,    52,    53,    54,    55,    57,    60,    84,    63,
    64,    65,    67,    56,    76,   147,    78,    79,   173,    80,
    81,   178,    42,   185,   186,   187,   157,   188,   124,   195,
   136,   197,   198,   152,   153,    22,    56,    22,   203,   223,
   227,    33,    84,   232,   233,    42,    58,    59,   234,    47,
    50,    52,    53,    54,    55,    57,    60,    32,    63,    64,
    65,    67,   235,   236,    33,   237,   238,   239,   241,    58,
    59,   242,    47,    50,    52,    53,    54,    55,    57,    60,
    32,    63,    64,    65,    67,    56,    84,    33,   228,   254,
  -161,   255,    58,    59,    42,    47,    50,    52,    53,    54,
    55,    57,    60,   256,    63,    64,    65,    67,    56,  -161,
  -161,    75,  -161,  -161,  -161,   258,   259,    42,   178,  -161,
  -161,  -161,  -161,  -161,   265,    12,   283,   284,   286,    32,
    76,   287,    78,    79,   289,    80,    81,   251,   252,    32,
   294,    58,    59,   265,    47,    50,    52,    53,    54,    55,
    57,    60,    32,    63,    64,    65,    67,   299,   301,   302,
   303,   227,   305,   228,    58,    59,    56,    47,    50,    52,
    53,    54,    55,    57,    60,    42,    63,    64,    65,    67,
    75,    84,   228,   310,   123,   311,   179,   313,   315,    56,
   316,   317,   318,   124,    32,   321,    84,   nil,    42,    76,
   nil,    78,    79,   nil,    80,    81,   nil,   nil,   nil,   nil,
    32,   nil,    56,   nil,   nil,   nil,   nil,    33,   nil,   nil,
   nil,    42,    58,    59,   nil,    47,    50,    52,    53,    54,
    55,    57,    60,    32,    63,    64,    65,    67,   nil,   nil,
    33,   nil,   nil,   nil,   nil,    58,    59,   nil,    47,    50,
    52,    53,    54,    55,    57,    60,    32,    63,    64,    65,
    67,    56,   nil,    33,   nil,   nil,   nil,   nil,    58,    59,
    42,    47,    50,    52,    53,    54,    55,    57,    60,   nil,
    63,    64,    65,    67,    56,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    42,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    32,   nil,    56,   nil,   nil,
   nil,   nil,    33,   nil,   nil,   nil,    42,    58,    59,   nil,
    47,    50,    52,    53,    54,    55,    57,    60,    32,    63,
    64,    65,    67,   nil,   nil,    33,   nil,   nil,   nil,   nil,
    58,    59,   nil,    47,    50,    52,    53,    54,    55,    57,
    60,    32,    63,    64,    65,    67,    56,   nil,    33,   nil,
   nil,   nil,   nil,    58,    59,   149,    47,    50,    52,    53,
    54,    55,    57,    60,   nil,    63,    64,    65,    67,    56,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    42,   nil,
   nil,   nil,   157,   nil,   nil,   nil,   nil,   nil,   nil,   152,
   153,   nil,    56,   nil,   nil,   nil,   nil,    33,   nil,   nil,
   nil,    42,    58,    59,   nil,    47,    50,    52,    53,    54,
    55,    57,    60,    32,    63,    64,    65,    67,   nil,   nil,
    33,   nil,   nil,   nil,   nil,    58,    59,   nil,    47,    50,
    52,    53,    54,    55,    57,    60,    32,    63,    64,    65,
    67,   nil,   nil,    33,   nil,   nil,   nil,   nil,    58,    59,
    56,    47,    50,    52,    53,    54,    55,    57,    60,   149,
    63,    64,    65,    67,   nil,   nil,   nil,   nil,   nil,    12,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    56,
   nil,   nil,   nil,   nil,   nil,   nil,   157,   nil,   149,   nil,
   nil,   nil,   nil,   152,   153,   nil,   nil,   nil,   nil,   nil,
   nil,    33,   nil,   nil,   nil,   nil,    58,    59,    56,    47,
    50,    52,    53,    54,    55,    57,    60,    42,    63,    64,
    65,    67,   152,   230,   nil,   nil,   nil,   nil,   nil,   nil,
    33,   nil,   nil,   nil,   nil,    58,    59,    56,    47,    50,
    52,    53,    54,    55,    57,    60,   246,    63,    64,    65,
    67,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,    33,
   nil,   nil,   nil,   nil,    58,    59,    56,    47,    50,    52,
    53,    54,    55,    57,    60,    42,    63,    64,    65,    67,
   nil,   230,   nil,   nil,   nil,   nil,   nil,   nil,    33,   nil,
   nil,   nil,   nil,    58,    59,    56,    47,    50,    52,    53,
    54,    55,    57,    60,   246,    63,    64,    65,    67,   nil,
    32,   nil,   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,
   nil,   nil,    58,    59,    56,    47,    50,    52,    53,    54,
    55,    57,    60,   246,    63,    64,    65,    67,   nil,   230,
   nil,   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,
   nil,    58,    59,    56,    47,    50,    52,    53,    54,    55,
    57,    60,   246,    63,    64,    65,    67,   nil,   230,   nil,
   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,
    58,    59,    56,    47,    50,    52,    53,    54,    55,    57,
    60,   246,    63,    64,    65,    67,   nil,   230,   nil,   nil,
   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    58,
    59,    56,    47,    50,    52,    53,    54,    55,    57,    60,
   246,    63,    64,    65,    67,   nil,   230,   nil,   nil,   nil,
   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    58,    59,
    56,    47,    50,    52,    53,    54,    55,    57,    60,   246,
    63,    64,    65,    67,   nil,   230,   nil,   nil,   nil,   nil,
   nil,   nil,    33,   nil,   nil,   nil,   nil,    58,    59,    56,
    47,    50,    52,    53,    54,    55,    57,    60,   246,    63,
    64,    65,    67,   nil,   230,   nil,   nil,   nil,   nil,   nil,
   nil,    33,   nil,   nil,   nil,   nil,    58,    59,    56,    47,
    50,    52,    53,    54,    55,    57,    60,   246,    63,    64,
    65,    67,   nil,   230,   nil,   nil,   nil,   nil,   nil,   nil,
    33,   nil,   nil,   nil,   nil,    58,    59,    56,    47,    50,
    52,    53,    54,    55,    57,    60,    42,    63,    64,    65,
    67,   nil,   230,   nil,   nil,   nil,   nil,   nil,   nil,    33,
   nil,   nil,   nil,   nil,    58,    59,   nil,    47,    50,    52,
    53,    54,    55,    57,    60,    56,    63,    64,    65,    67,
   nil,    32,   nil,   nil,   149,   nil,   nil,   nil,    33,   nil,
   nil,   nil,   nil,    58,    59,   nil,    47,    50,    52,    53,
    54,    55,    57,    60,   nil,    63,    64,    65,    67,   nil,
   nil,   157,    56,   nil,   nil,   nil,   nil,   nil,   152,   153,
   nil,   149,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,
   nil,    58,    59,   nil,    47,    50,    52,    53,    54,    55,
    57,    60,    56,    63,    64,    65,    67,   nil,   157,   nil,
   nil,    42,   nil,   nil,   nil,   152,   153,   nil,   nil,   nil,
   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    58,    59,
    56,    47,    50,    52,    53,    54,    55,    57,    60,    42,
    63,    64,    65,    67,   nil,   nil,    32,   nil,   nil,   nil,
   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    58,    59,
    56,    47,    50,    52,    53,    54,    55,    57,    60,    42,
    63,    64,    65,    67,    32,   nil,   nil,   nil,   nil,    12,
   nil,    33,   nil,   nil,   nil,   nil,    58,    59,   nil,    47,
    50,    52,    53,    54,    55,    57,    60,    56,    63,    64,
    65,    67,   nil,   nil,    32,   nil,   149,   nil,   nil,   nil,
   nil,    33,   nil,   nil,   nil,   nil,    58,    59,   nil,    47,
    50,    52,    53,    54,    55,    57,    60,   nil,    63,    64,
    65,    67,   nil,   157,    56,   nil,   nil,   nil,   nil,   nil,
   152,   153,   nil,   149,   nil,   nil,   nil,   nil,    33,   nil,
   nil,   nil,   nil,    58,    59,   nil,    47,    50,    52,    53,
    54,    55,    57,    60,    56,    63,    64,    65,    67,   nil,
   157,   nil,   nil,    42,   nil,   nil,   nil,   152,   153,   nil,
   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,
    58,    59,    56,    47,    50,    52,    53,    54,    55,    57,
    60,   246,    63,    64,    65,    67,   nil,   nil,    32,   nil,
   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,
    58,    59,    56,    47,    50,    52,    53,    54,    55,    57,
    60,   246,    63,    64,    65,    67,   230,   nil,   nil,   nil,
   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    58,    59,
    56,    47,    50,    52,    53,    54,    55,    57,    60,    42,
    63,    64,    65,    67,   nil,   nil,   230,   nil,   nil,    12,
   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    58,    59,
    56,    47,    50,    52,    53,    54,    55,    57,    60,    42,
    63,    64,    65,    67,    32,   nil,   nil,   nil,   nil,   nil,
   nil,    33,   nil,   nil,   nil,   nil,    58,    59,    56,    47,
    50,    52,    53,    54,    55,    57,    60,    42,    63,    64,
    65,    67,   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,
   nil,    33,   nil,   nil,   nil,   nil,    58,    59,    56,    47,
    50,    52,    53,    54,    55,    57,    60,   246,    63,    64,
    65,    67,    32,   nil,   nil,   nil,   nil,   nil,   nil,    33,
   nil,   nil,   nil,   nil,    58,    59,    56,    47,    50,    52,
    53,    54,    55,    57,    60,    42,    63,    64,    65,    67,
   nil,   nil,   230,   nil,   nil,   nil,   nil,   nil,   nil,    33,
   nil,   nil,   nil,   nil,    58,    59,    56,    47,    50,    52,
    53,    54,    55,    57,    60,   246,    63,    64,    65,    67,
    32,   nil,   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,
   nil,   nil,    58,    59,   nil,    47,    50,    52,    53,    54,
    55,    57,    60,   nil,    63,    64,    65,    67,   nil,   nil,
   230,   nil,   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,
   nil,  -173,    58,    59,  -173,    47,    50,    52,    53,    54,
    55,    57,    60,   nil,    63,    64,    65,    67,   nil,   nil,
  -173,  -173,   nil,  -173,  -173,  -173,   nil,   nil,   nil,   nil,
  -173,  -173,  -173,  -173,  -173,   nil,   nil,   nil,   nil,   nil,
  -173,  -173,  -173 ]

racc_action_check = [
    12,    72,    36,   210,   188,    85,   153,    72,   155,    12,
   188,    91,   230,    18,     1,    31,   216,     7,   155,   153,
    12,    12,   216,    27,    85,   230,    85,    85,    17,    85,
    85,     9,    27,    85,    18,    91,    31,    17,   210,   212,
    36,   212,   212,    27,    12,    72,    33,    17,   188,    17,
    17,    12,    17,    17,    10,    33,    12,    12,    11,    12,
    12,    12,    12,    12,    12,    12,    12,    27,    12,    12,
    12,    12,    13,     0,    27,     0,    15,     0,    16,    27,
    27,     0,    27,    27,    27,    27,    27,    27,    27,    27,
    33,    27,    27,    27,    27,    37,    94,    94,    94,    23,
    33,   151,    33,    33,    37,    33,    33,    33,    33,    33,
    33,    33,    33,    24,    33,    33,    33,    33,    42,    29,
   151,   151,    30,   151,   151,   151,    32,    42,    34,    34,
   151,   151,   151,   151,   151,    14,   146,   146,   146,    37,
    14,    90,    60,    60,   117,   117,    50,    52,    53,    54,
    90,    55,    67,    70,    37,    37,    37,    37,    37,    37,
    37,    37,    42,    37,    37,    37,    37,    71,    74,    42,
    75,    76,    77,    79,    42,    42,    80,    42,    42,    42,
    42,    42,    42,    42,    42,    90,    42,    42,    42,    42,
    96,    81,    90,    82,    87,   138,    88,    90,    90,    96,
    90,    90,    90,    90,    90,    90,    90,    90,    92,    90,
    90,    90,    90,    99,   138,    95,   138,   138,    98,   138,
   138,   104,    99,   110,   113,   114,    96,   115,   122,   124,
   125,   126,   127,    96,    96,   129,   100,   130,   137,   152,
   154,    96,   173,   179,   180,   100,    96,    96,   181,    96,
    96,    96,    96,    96,    96,    96,    96,    99,    96,    96,
    96,    96,   182,   183,    99,   184,   186,   187,   193,    99,
    99,   194,    99,    99,    99,    99,    99,    99,    99,    99,
   100,    99,    99,    99,    99,   101,   197,   100,   201,   202,
   302,   203,   100,   100,   101,   100,   100,   100,   100,   100,
   100,   100,   100,   204,   100,   100,   100,   100,   102,   302,
   302,   200,   302,   302,   302,   208,   209,   102,   211,   302,
   302,   302,   302,   302,   214,   223,   238,   239,   243,   101,
   200,   244,   200,   200,   252,   200,   200,   200,   200,   255,
   257,   101,   101,   262,   101,   101,   101,   101,   101,   101,
   101,   101,   102,   101,   101,   101,   101,   264,   269,   277,
   278,   280,   284,   288,   102,   102,   105,   102,   102,   102,
   102,   102,   102,   102,   102,   105,   102,   102,   102,   102,
    73,   289,   290,   291,    73,   296,   105,   300,   304,   106,
   305,   307,   308,    73,   310,   316,   318,   nil,   106,    73,
   nil,    73,    73,   nil,    73,    73,   nil,   nil,   nil,   nil,
   105,   nil,   107,   nil,   nil,   nil,   nil,   105,   nil,   nil,
   nil,   107,   105,   105,   nil,   105,   105,   105,   105,   105,
   105,   105,   105,   106,   105,   105,   105,   105,   nil,   nil,
   106,   nil,   nil,   nil,   nil,   106,   106,   nil,   106,   106,
   106,   106,   106,   106,   106,   106,   107,   106,   106,   106,
   106,   108,   nil,   107,   nil,   nil,   nil,   nil,   107,   107,
   108,   107,   107,   107,   107,   107,   107,   107,   107,   nil,
   107,   107,   107,   107,   109,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   109,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   108,   nil,   123,   nil,   nil,
   nil,   nil,   108,   nil,   nil,   nil,   123,   108,   108,   nil,
   108,   108,   108,   108,   108,   108,   108,   108,   109,   108,
   108,   108,   108,   nil,   nil,   109,   nil,   nil,   nil,   nil,
   109,   109,   nil,   109,   109,   109,   109,   109,   109,   109,
   109,   123,   109,   109,   109,   109,   136,   nil,   123,   nil,
   nil,   nil,   nil,   123,   123,   136,   123,   123,   123,   123,
   123,   123,   123,   123,   nil,   123,   123,   123,   123,   144,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   144,   nil,
   nil,   nil,   136,   nil,   nil,   nil,   nil,   nil,   nil,   136,
   136,   nil,   147,   nil,   nil,   nil,   nil,   136,   nil,   nil,
   nil,   147,   136,   136,   nil,   136,   136,   136,   136,   136,
   136,   136,   136,   144,   136,   136,   136,   136,   nil,   nil,
   144,   nil,   nil,   nil,   nil,   144,   144,   nil,   144,   144,
   144,   144,   144,   144,   144,   144,   147,   144,   144,   144,
   144,   nil,   nil,   147,   nil,   nil,   nil,   nil,   147,   147,
   149,   147,   147,   147,   147,   147,   147,   147,   147,   149,
   147,   147,   147,   147,   nil,   nil,   nil,   nil,   nil,   149,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   157,
   nil,   nil,   nil,   nil,   nil,   nil,   149,   nil,   157,   nil,
   nil,   nil,   nil,   149,   149,   nil,   nil,   nil,   nil,   nil,
   nil,   149,   nil,   nil,   nil,   nil,   149,   149,   195,   149,
   149,   149,   149,   149,   149,   149,   149,   195,   149,   149,
   149,   149,   157,   157,   nil,   nil,   nil,   nil,   nil,   nil,
   157,   nil,   nil,   nil,   nil,   157,   157,   198,   157,   157,
   157,   157,   157,   157,   157,   157,   198,   157,   157,   157,
   157,   nil,   195,   nil,   nil,   nil,   nil,   nil,   nil,   195,
   nil,   nil,   nil,   nil,   195,   195,   206,   195,   195,   195,
   195,   195,   195,   195,   195,   206,   195,   195,   195,   195,
   nil,   198,   nil,   nil,   nil,   nil,   nil,   nil,   198,   nil,
   nil,   nil,   nil,   198,   198,   213,   198,   198,   198,   198,
   198,   198,   198,   198,   213,   198,   198,   198,   198,   nil,
   206,   nil,   nil,   nil,   nil,   nil,   nil,   206,   nil,   nil,
   nil,   nil,   206,   206,   215,   206,   206,   206,   206,   206,
   206,   206,   206,   215,   206,   206,   206,   206,   nil,   213,
   nil,   nil,   nil,   nil,   nil,   nil,   213,   nil,   nil,   nil,
   nil,   213,   213,   217,   213,   213,   213,   213,   213,   213,
   213,   213,   217,   213,   213,   213,   213,   nil,   215,   nil,
   nil,   nil,   nil,   nil,   nil,   215,   nil,   nil,   nil,   nil,
   215,   215,   218,   215,   215,   215,   215,   215,   215,   215,
   215,   218,   215,   215,   215,   215,   nil,   217,   nil,   nil,
   nil,   nil,   nil,   nil,   217,   nil,   nil,   nil,   nil,   217,
   217,   219,   217,   217,   217,   217,   217,   217,   217,   217,
   219,   217,   217,   217,   217,   nil,   218,   nil,   nil,   nil,
   nil,   nil,   nil,   218,   nil,   nil,   nil,   nil,   218,   218,
   220,   218,   218,   218,   218,   218,   218,   218,   218,   220,
   218,   218,   218,   218,   nil,   219,   nil,   nil,   nil,   nil,
   nil,   nil,   219,   nil,   nil,   nil,   nil,   219,   219,   221,
   219,   219,   219,   219,   219,   219,   219,   219,   221,   219,
   219,   219,   219,   nil,   220,   nil,   nil,   nil,   nil,   nil,
   nil,   220,   nil,   nil,   nil,   nil,   220,   220,   222,   220,
   220,   220,   220,   220,   220,   220,   220,   222,   220,   220,
   220,   220,   nil,   221,   nil,   nil,   nil,   nil,   nil,   nil,
   221,   nil,   nil,   nil,   nil,   221,   221,   226,   221,   221,
   221,   221,   221,   221,   221,   221,   226,   221,   221,   221,
   221,   nil,   222,   nil,   nil,   nil,   nil,   nil,   nil,   222,
   nil,   nil,   nil,   nil,   222,   222,   nil,   222,   222,   222,
   222,   222,   222,   222,   222,   227,   222,   222,   222,   222,
   nil,   226,   nil,   nil,   227,   nil,   nil,   nil,   226,   nil,
   nil,   nil,   nil,   226,   226,   nil,   226,   226,   226,   226,
   226,   226,   226,   226,   nil,   226,   226,   226,   226,   nil,
   nil,   227,   228,   nil,   nil,   nil,   nil,   nil,   227,   227,
   nil,   228,   nil,   nil,   nil,   nil,   227,   nil,   nil,   nil,
   nil,   227,   227,   nil,   227,   227,   227,   227,   227,   227,
   227,   227,   229,   227,   227,   227,   227,   nil,   228,   nil,
   nil,   229,   nil,   nil,   nil,   228,   228,   nil,   nil,   nil,
   nil,   nil,   nil,   228,   nil,   nil,   nil,   nil,   228,   228,
   242,   228,   228,   228,   228,   228,   228,   228,   228,   242,
   228,   228,   228,   228,   nil,   nil,   229,   nil,   nil,   nil,
   nil,   nil,   nil,   229,   nil,   nil,   nil,   nil,   229,   229,
   246,   229,   229,   229,   229,   229,   229,   229,   229,   246,
   229,   229,   229,   229,   242,   nil,   nil,   nil,   nil,   246,
   nil,   242,   nil,   nil,   nil,   nil,   242,   242,   nil,   242,
   242,   242,   242,   242,   242,   242,   242,   251,   242,   242,
   242,   242,   nil,   nil,   246,   nil,   251,   nil,   nil,   nil,
   nil,   246,   nil,   nil,   nil,   nil,   246,   246,   nil,   246,
   246,   246,   246,   246,   246,   246,   246,   nil,   246,   246,
   246,   246,   nil,   251,   254,   nil,   nil,   nil,   nil,   nil,
   251,   251,   nil,   254,   nil,   nil,   nil,   nil,   251,   nil,
   nil,   nil,   nil,   251,   251,   nil,   251,   251,   251,   251,
   251,   251,   251,   251,   258,   251,   251,   251,   251,   nil,
   254,   nil,   nil,   258,   nil,   nil,   nil,   254,   254,   nil,
   nil,   nil,   nil,   nil,   nil,   254,   nil,   nil,   nil,   nil,
   254,   254,   261,   254,   254,   254,   254,   254,   254,   254,
   254,   261,   254,   254,   254,   254,   nil,   nil,   258,   nil,
   nil,   nil,   nil,   nil,   nil,   258,   nil,   nil,   nil,   nil,
   258,   258,   263,   258,   258,   258,   258,   258,   258,   258,
   258,   263,   258,   258,   258,   258,   261,   nil,   nil,   nil,
   nil,   nil,   nil,   261,   nil,   nil,   nil,   nil,   261,   261,
   265,   261,   261,   261,   261,   261,   261,   261,   261,   265,
   261,   261,   261,   261,   nil,   nil,   263,   nil,   nil,   265,
   nil,   nil,   nil,   263,   nil,   nil,   nil,   nil,   263,   263,
   282,   263,   263,   263,   263,   263,   263,   263,   263,   282,
   263,   263,   263,   263,   265,   nil,   nil,   nil,   nil,   nil,
   nil,   265,   nil,   nil,   nil,   nil,   265,   265,   287,   265,
   265,   265,   265,   265,   265,   265,   265,   287,   265,   265,
   265,   265,   nil,   nil,   282,   nil,   nil,   nil,   nil,   nil,
   nil,   282,   nil,   nil,   nil,   nil,   282,   282,   299,   282,
   282,   282,   282,   282,   282,   282,   282,   299,   282,   282,
   282,   282,   287,   nil,   nil,   nil,   nil,   nil,   nil,   287,
   nil,   nil,   nil,   nil,   287,   287,   303,   287,   287,   287,
   287,   287,   287,   287,   287,   303,   287,   287,   287,   287,
   nil,   nil,   299,   nil,   nil,   nil,   nil,   nil,   nil,   299,
   nil,   nil,   nil,   nil,   299,   299,   311,   299,   299,   299,
   299,   299,   299,   299,   299,   311,   299,   299,   299,   299,
   303,   nil,   nil,   nil,   nil,   nil,   nil,   303,   nil,   nil,
   nil,   nil,   303,   303,   nil,   303,   303,   303,   303,   303,
   303,   303,   303,   nil,   303,   303,   303,   303,   nil,   nil,
   311,   nil,   nil,   nil,   nil,   nil,   nil,   311,   nil,   nil,
   nil,   162,   311,   311,   162,   311,   311,   311,   311,   311,
   311,   311,   311,   nil,   311,   311,   311,   311,   nil,   nil,
   162,   162,   nil,   162,   162,   162,   nil,   nil,   nil,   nil,
   162,   162,   162,   162,   162,   nil,   nil,   nil,   nil,   nil,
   162,   162,   162 ]

racc_action_pointer = [
    56,    14,   nil,   nil,   nil,   nil,   nil,    15,   nil,    13,
     4,    36,    -6,    72,   131,    73,    28,    17,   -16,   nil,
   nil,   nil,   nil,    49,    91,   nil,   nil,    17,   nil,   108,
    94,   -14,    98,    40,    66,   nil,   -24,    89,   nil,   nil,
   nil,   nil,   112,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   131,   nil,   132,   133,   134,   136,   nil,   nil,   nil,   nil,
    70,   nil,   nil,   nil,   nil,   nil,   nil,    74,   nil,   nil,
   148,   161,    -5,   369,   118,   120,   140,   141,   nil,   139,
   142,   157,   143,   nil,   nil,    -6,   nil,   155,   146,   nil,
   135,   -15,   158,   nil,    38,   155,   184,   nil,   190,   207,
   230,   279,   302,   nil,   205,   360,   383,   406,   455,   478,
   151,   nil,   nil,   218,   218,   216,   nil,   131,   nil,   nil,
   nil,   nil,   204,   501,   214,   191,   220,   209,   nil,   185,
   187,   nil,   nil,   nil,   nil,   nil,   550,   198,   184,   nil,
   nil,   nil,   nil,   nil,   573,   nil,    78,   596,   nil,   654,
   nil,    78,   224,    -9,   196,   -43,   nil,   683,   nil,   nil,
   nil,   nil,  1568,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   192,   nil,   nil,   nil,   nil,   nil,   227,
   228,   232,   246,   247,   249,   nil,   259,   263,    -2,   nil,
   nil,   nil,   nil,   252,   260,   712,   nil,   236,   741,   nil,
   300,   237,   248,   288,   245,   nil,   770,   nil,   254,   300,
   -13,   302,    -4,   799,   309,   828,   -26,   857,   886,   915,
   944,   973,  1002,   300,   nil,   nil,  1031,  1069,  1106,  1136,
    -3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   318,   317,
   nil,   nil,  1164,   312,   320,   nil,  1194,   nil,   nil,   nil,
   nil,  1231,   319,   nil,  1268,   289,   nil,   282,  1298,   nil,
   nil,  1326,   328,  1356,   313,  1384,   nil,   nil,   nil,   310,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   343,   349,   nil,
   317,   nil,  1414,   nil,   356,   nil,   nil,  1442,   312,   331,
   331,   372,   nil,   nil,   nil,   nil,   341,   nil,   nil,  1472,
   371,   nil,   267,  1500,   372,   383,   nil,   375,   381,   nil,
   344,  1530,   nil,   nil,   nil,   nil,   387,   nil,   346,   nil,
   nil,   nil,   nil ]

racc_action_default = [
  -179,  -179,    -1,    -2,    -3,    -4,    -5,    -7,   -22,  -179,
  -179,  -179,  -179,  -179,    -9,  -179,  -179,  -179,   -50,   -51,
   -53,   -54,   -93,  -179,   -35,   -36,   -37,  -179,   -39,   -41,
  -179,   -45,  -169,  -179,  -135,  -136,  -139,  -179,  -141,  -142,
  -143,  -144,  -179,  -146,  -147,  -148,  -149,  -150,  -152,  -153,
  -179,  -155,  -179,  -179,  -179,  -179,  -165,  -166,  -167,  -168,
  -179,  -172,  -173,  -174,  -175,  -176,  -177,  -179,   323,    -6,
  -179,  -179,  -179,  -179,  -179,  -179,  -179,  -179,   -58,   -60,
   -62,   -63,  -179,   -49,  -169,   -70,   -34,   -70,  -179,   -38,
  -179,  -179,  -179,   -44,  -179,  -179,  -179,  -131,  -179,  -179,
  -179,  -179,  -179,  -140,  -179,  -179,  -179,  -179,  -179,  -179,
  -179,  -171,  -178,  -179,  -179,    -8,   -13,   -18,   -15,   -16,
   -17,   -23,  -179,  -179,  -179,   -70,   -28,  -179,   -55,  -179,
  -179,   -59,   -61,   -64,   -48,   -26,  -179,   -72,   -47,   -40,
   -42,  -151,   -43,  -123,  -179,  -132,  -179,  -179,  -128,  -179,
   -79,  -179,  -179,  -169,   -96,  -179,   -98,  -179,  -101,  -102,
  -103,  -104,  -106,  -107,  -108,  -109,  -110,  -111,  -112,  -119,
  -120,  -121,  -122,  -179,  -133,  -134,  -137,  -138,  -145,  -179,
  -179,  -179,  -179,  -179,  -179,  -170,  -179,  -179,  -179,   -14,
   -19,   -20,   -24,  -179,   -32,  -179,   -25,  -179,  -179,   -56,
  -179,   -71,   -77,  -179,  -179,  -125,  -179,  -129,  -179,  -179,
  -179,  -121,  -179,  -179,  -179,  -179,  -179,  -179,  -179,  -179,
  -179,  -179,  -179,  -179,   -52,   -92,  -179,  -179,  -179,  -179,
  -169,  -100,  -154,  -156,  -157,  -158,  -159,  -160,  -179,  -179,
   -12,   -30,  -179,  -179,   -87,   -27,  -179,   -29,   -57,   -65,
   -66,  -179,  -179,   -46,  -179,  -179,  -124,  -179,  -179,   -21,
  -105,  -179,  -179,  -179,  -179,  -179,   -83,   -84,   -89,  -179,
   -91,  -113,  -114,  -115,  -116,  -117,  -118,  -179,  -163,   -99,
   -97,  -130,  -179,   -10,  -179,   -31,   -33,  -179,   -67,  -179,
   -78,   -73,   -75,   -76,  -126,  -127,  -179,   -82,   -88,  -179,
  -179,   -90,  -162,  -179,  -179,  -179,   -86,  -179,   -69,   -95,
  -179,  -179,   -81,   -85,  -164,  -161,  -179,   -68,  -179,   -74,
   -80,   -11,   -94 ]

racc_goto_table = [
    83,   125,    31,   193,   155,    17,   224,   116,   243,   162,
    18,    73,   292,    93,   247,    30,    18,    31,    85,     1,
   148,    97,     2,    18,   266,   277,   135,   121,   137,   264,
    30,   268,   104,   271,   272,   273,   274,   275,   276,    95,
    28,     3,     4,     5,   201,     6,   293,     7,    14,   162,
    69,   115,   189,   122,   118,    89,   127,   210,    24,    86,
   139,    87,   162,   202,   134,   253,   196,   319,   224,   225,
   162,   207,   297,   141,   142,   128,   192,   296,   300,   298,
    31,   304,   145,   138,   248,   249,   250,   307,    18,   174,
   175,   308,   291,    30,   280,   180,   181,   182,   183,   184,
   306,   293,   314,   279,   231,    94,   146,   176,   177,   103,
   nil,   nil,   nil,   194,   nil,   312,   224,   nil,   nil,   nil,
   nil,   nil,   285,   240,   245,   200,   nil,   320,   nil,   199,
    18,   nil,   nil,   nil,   204,   nil,   nil,   208,   nil,   211,
   162,   162,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   141,   nil,   nil,   nil,   288,
   nil,   nil,   290,   nil,   162,   nil,   nil,   162,   nil,   nil,
   118,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   127,
   nil,   nil,   nil,   nil,   nil,   244,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   257,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   278,   nil,   nil,   281,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   194,   nil,   nil,   nil,   104,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   295,   nil,
   nil,   nil,   nil,   nil,   nil,   244,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   309,   278,   nil,   nil,   nil,   nil,   244,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   278,   nil,   nil,   nil,   nil,   nil,   nil,
   322 ]

racc_goto_check = [
    14,    20,    25,    24,    45,    17,    15,    11,    26,    64,
    36,    17,    49,    14,    23,    32,    36,    25,    17,     1,
    72,    73,     2,    36,    54,    84,    21,    18,    21,    23,
    32,    23,    25,    23,    23,    23,    23,    23,    23,    70,
    29,     3,     4,     5,    45,     6,    50,     7,     8,    64,
     9,    10,    13,    19,    14,    29,    14,    45,    27,    28,
    30,    33,    64,    34,    14,    35,    21,    49,    15,    38,
    64,    72,    54,    14,    14,    36,    18,    23,    26,    23,
    25,    84,    73,    17,    42,    43,    44,    46,    36,    25,
    25,    47,    48,    32,    58,    25,    25,    25,    25,    25,
    26,    50,    84,    59,    60,    69,    71,    70,    70,    76,
   nil,   nil,   nil,    25,   nil,    23,    15,   nil,   nil,   nil,
   nil,   nil,    24,    11,    20,    17,   nil,    23,   nil,    36,
    36,   nil,   nil,   nil,    25,   nil,   nil,    25,   nil,    25,
    64,    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    14,   nil,   nil,   nil,    45,
   nil,   nil,    45,   nil,    64,   nil,   nil,    64,   nil,   nil,
    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    14,
   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,    25,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    25,   nil,   nil,   nil,    25,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,
   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    14,    25,   nil,   nil,   nil,   nil,    25,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,
    14 ]

racc_goto_pointer = [
   nil,    19,    22,    41,    42,    43,    45,    47,    41,    36,
   -21,   -65,   nil,   -65,   -18,  -146,   nil,    -5,   -46,   -20,
   -73,   -59,   nil,  -184,  -120,   -10,  -187,    46,    35,    28,
   -30,   nil,     3,    37,   -74,  -137,     0,   nil,   -83,   nil,
   nil,   nil,  -116,  -115,  -114,   -92,  -202,  -198,  -163,  -243,
  -209,   nil,   nil,   nil,  -190,   nil,   nil,   nil,  -134,  -124,
   -53,   nil,   nil,   nil,   -87,   nil,   nil,   nil,   nil,    72,
     6,    11,   -75,   -12,   nil,   nil,    72,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  -201,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   209,   nil,   nil,
   nil,   nil,   117,   nil,    48,   150,     8,   nil,   nil,   nil,
   nil,   nil,   126,   151,   nil,   171,   nil,   nil,   nil,   nil,
    26,    29,    98,   nil,   nil,   nil,    49,    19,   267,    20,
    21,    77,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    40,   170,   164,   165,   nil,   166,   167,   168,   154,   156,
   158,   159,   160,   161,    62,   163,   169,   172,    35,   nil,
    34,   nil,   nil,   nil,    36,    37,    38,    39,    41,    43,
    44,    45,    46,    51,   nil,    61,    66 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 80, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  3, 82, :_reduce_6,
  0, 87, :_reduce_none,
  3, 87, :_reduce_8,
  0, 88, :_reduce_none,
  5, 88, :_reduce_10,
  8, 88, :_reduce_11,
  3, 89, :_reduce_12,
  1, 89, :_reduce_none,
  2, 90, :_reduce_14,
  1, 91, :_reduce_none,
  1, 91, :_reduce_16,
  1, 91, :_reduce_17,
  0, 92, :_reduce_18,
  1, 92, :_reduce_19,
  1, 92, :_reduce_20,
  3, 94, :_reduce_21,
  1, 86, :_reduce_none,
  4, 83, :_reduce_23,
  5, 83, :_reduce_24,
  5, 84, :_reduce_25,
  4, 85, :_reduce_26,
  3, 99, :_reduce_27,
  1, 99, :_reduce_28,
  3, 101, :_reduce_29,
  3, 98, :_reduce_30,
  3, 103, :_reduce_31,
  1, 103, :_reduce_none,
  4, 97, :_reduce_33,
  3, 95, :_reduce_34,
  2, 95, :_reduce_35,
  1, 108, :_reduce_36,
  1, 108, :_reduce_37,
  2, 106, :_reduce_38,
  1, 106, :_reduce_39,
  3, 109, :_reduce_40,
  1, 109, :_reduce_none,
  3, 110, :_reduce_42,
  3, 110, :_reduce_43,
  2, 110, :_reduce_44,
  1, 110, :_reduce_none,
  4, 107, :_reduce_46,
  2, 112, :_reduce_47,
  3, 96, :_reduce_48,
  2, 96, :_reduce_49,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 117, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  3, 118, :_reduce_55,
  4, 118, :_reduce_56,
  5, 119, :_reduce_57,
  1, 120, :_reduce_58,
  2, 120, :_reduce_59,
  1, 120, :_reduce_60,
  2, 120, :_reduce_61,
  1, 120, :_reduce_62,
  1, 120, :_reduce_63,
  2, 120, :_reduce_64,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  2, 122, :_reduce_67,
  4, 123, :_reduce_68,
  1, 125, :_reduce_none,
  0, 100, :_reduce_none,
  2, 100, :_reduce_71,
  0, 113, :_reduce_none,
  3, 113, :_reduce_73,
  3, 127, :_reduce_74,
  1, 127, :_reduce_none,
  1, 128, :_reduce_none,
  0, 114, :_reduce_none,
  2, 114, :_reduce_78,
  1, 130, :_reduce_none,
  6, 131, :_reduce_80,
  5, 131, :_reduce_81,
  4, 132, :_reduce_82,
  3, 132, :_reduce_83,
  1, 133, :_reduce_none,
  3, 133, :_reduce_85,
  3, 105, :_reduce_86,
  1, 105, :_reduce_none,
  4, 134, :_reduce_88,
  3, 134, :_reduce_89,
  4, 135, :_reduce_90,
  3, 135, :_reduce_91,
  2, 136, :_reduce_92,
  1, 115, :_reduce_93,
  3, 126, :_reduce_94,
  1, 126, :_reduce_none,
  1, 124, :_reduce_none,
  3, 124, :_reduce_97,
  1, 137, :_reduce_none,
  3, 137, :_reduce_99,
  2, 138, :_reduce_100,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 139, :_reduce_none,
  1, 141, :_reduce_none,
  3, 141, :_reduce_105,
  1, 141, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  3, 144, :_reduce_113,
  3, 144, :_reduce_114,
  3, 144, :_reduce_115,
  3, 144, :_reduce_116,
  3, 144, :_reduce_117,
  3, 144, :_reduce_118,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  1, 145, :_reduce_none,
  1, 145, :_reduce_none,
  3, 147, :_reduce_123,
  5, 147, :_reduce_124,
  4, 147, :_reduce_125,
  6, 147, :_reduce_126,
  4, 151, :_reduce_127,
  1, 150, :_reduce_128,
  2, 150, :_reduce_129,
  4, 152, :_reduce_130,
  1, 148, :_reduce_131,
  2, 148, :_reduce_132,
  3, 104, :_reduce_133,
  3, 104, :_reduce_134,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  3, 149, :_reduce_137,
  3, 149, :_reduce_138,
  1, 149, :_reduce_none,
  2, 153, :_reduce_140,
  1, 153, :_reduce_none,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  3, 155, :_reduce_145,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 159, :_reduce_150,
  3, 129, :_reduce_151,
  1, 129, :_reduce_none,
  1, 111, :_reduce_none,
  4, 157, :_reduce_154,
  1, 157, :_reduce_none,
  4, 162, :_reduce_156,
  4, 162, :_reduce_157,
  4, 162, :_reduce_158,
  4, 162, :_reduce_159,
  4, 162, :_reduce_160,
  4, 146, :_reduce_161,
  4, 140, :_reduce_162,
  1, 163, :_reduce_none,
  3, 163, :_reduce_164,
  1, 160, :_reduce_165,
  1, 160, :_reduce_166,
  1, 154, :_reduce_167,
  1, 154, :_reduce_168,
  1, 93, :_reduce_169,
  3, 161, :_reduce_170,
  2, 161, :_reduce_171,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_174,
  1, 143, :_reduce_175,
  1, 143, :_reduce_176,
  1, 164, :_reduce_none,
  2, 165, :_reduce_178 ]

racc_reduce_n = 179

racc_shift_n = 323

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :FETCH => 4,
  :FIRST => 5,
  :unsigned_integer => 6,
  :ROWS => 7,
  :ONLY => 8,
  :OFFSET => 9,
  :NEXT => 10,
  :comma => 11,
  :built_in_function => 12,
  :ASC => 13,
  :DESC => 14,
  :left_paren => 15,
  :right_paren => 16,
  :INSERT => 17,
  :INTO => 18,
  :UPDATE => 19,
  :SET => 20,
  :DELETE => 21,
  :FROM => 22,
  :equals_operator => 23,
  :VALUES => 24,
  :SELECT => 25,
  :asterisk => 26,
  :DISTINCT => 27,
  :period => 28,
  :AS => 29,
  :CROSS => 30,
  :JOIN => 31,
  :INNER => 32,
  :LEFT => 33,
  :OUTER => 34,
  :RIGHT => 35,
  :FULL => 36,
  :ON => 37,
  :USING => 38,
  :WHERE => 39,
  :GROUP => 40,
  :HAVING => 41,
  :NOT => 42,
  :BETWEEN => 43,
  :AND => 44,
  :IN => 45,
  :LIKE => 46,
  :IS => 47,
  :NULL => 48,
  :EXISTS => 49,
  :identifier => 50,
  :OR => 51,
  :not_equals_operator => 52,
  :less_than_operator => 53,
  :greater_than_operator => 54,
  :less_than_or_equals_operator => 55,
  :greater_than_or_equals_operator => 56,
  :CASE => 57,
  :END => 58,
  :ELSE => 59,
  :WHEN => 60,
  :THEN => 61,
  :plus_sign => 62,
  :minus_sign => 63,
  :solidus => 64,
  :CURRENT_USER => 65,
  :COUNT => 66,
  :AVG => 67,
  :MAX => 68,
  :MIN => 69,
  :SUM => 70,
  :unsigned_float => 71,
  :quote => 72,
  :character_string_literal => 73,
  :variable => 74,
  :true_literal => 75,
  :false_literal => 76,
  :DATE => 77,
  :date_string => 78 }

racc_nt_base = 79

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "FETCH",
  "FIRST",
  "unsigned_integer",
  "ROWS",
  "ONLY",
  "OFFSET",
  "NEXT",
  "comma",
  "built_in_function",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "UPDATE",
  "SET",
  "DELETE",
  "FROM",
  "equals_operator",
  "VALUES",
  "SELECT",
  "asterisk",
  "DISTINCT",
  "period",
  "AS",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "CASE",
  "END",
  "ELSE",
  "WHEN",
  "THEN",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "unsigned_float",
  "quote",
  "character_string_literal",
  "variable",
  "true_literal",
  "false_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "update_specification",
  "delete_specification",
  "query_expression",
  "order_by_clause",
  "fetch_only_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_name",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "assign_list",
  "where_clause",
  "assign_column",
  "row_value_constructor",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "distinct_select_list",
  "table_expression",
  "select_list",
  "select_sublist",
  "derived_column",
  "qualifier",
  "from_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "column_reference",
  "row_subquery",
  "between_predicate",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_function",
  "boolean_primary",
  "predicate",
  "boolean_literal",
  "comparison_predicate",
  "row_value_constructor_element",
  "general_function",
  "case_expression",
  "when_expressions",
  "term",
  "when_value_expressions",
  "when_value_expression",
  "when_expression",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "general_literal",
  "general_set_function",
  "argument_list",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 15)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1], val[2])
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.racc', 20)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2])
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'parser.racc', 24)
  def _reduce_10(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(0, val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 25)
  def _reduce_11(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(val[1], val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 28)
  def _reduce_12(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.racc', 32)
  def _reduce_14(val, _values, result)
     result = val[1].new(val[0])
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::BuiltInFunction.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 37)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Ascending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Ascending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 42)
  def _reduce_20(val, _values, result)
     result = SQLParser::Statement::Descending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1])
    result
  end
.,.,

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_24(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_25(val, _values, result)
     result = SQLParser::Statement::Update.new(val[1], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::Delete.new(val[2], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_27(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_28(val, _values, result)
     result = Array(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::AssignColumn.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_31(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 32 omitted

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_33(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_34(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::All.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_37(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_38(val, _values, result)
     result = SQLParser::Statement::Distinct.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_39(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_40(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 41 omitted

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_42(val, _values, result)
     result = SQLParser::Statement::All.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 97)
  def _reduce_43(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 98)
  def _reduce_44(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1])
    result
  end
.,.,

# reduce 45 omitted

module_eval(<<'.,.,', 'parser.racc', 102)
  def _reduce_46(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_48(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_49(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1])
    result
  end
.,.,

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_57(val, _values, result)
     result = val[1].new(val[0], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_58(val, _values, result)
     result = SQLParser::Statement::InnerJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::LeftJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_61(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 132)
  def _reduce_62(val, _values, result)
     result = SQLParser::Statement::RightJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_63(val, _values, result)
     result = SQLParser::Statement::FullJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 134)
  def _reduce_64(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin
    result
  end
.,.,

# reduce 65 omitted

# reduce 66 omitted

module_eval(<<'.,.,', 'parser.racc', 141)
  def _reduce_67(val, _values, result)
     result = SQLParser::Statement::On.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 144)
  def _reduce_68(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2])
    result
  end
.,.,

# reduce 69 omitted

# reduce 70 omitted

module_eval(<<'.,.,', 'parser.racc', 151)
  def _reduce_71(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1])
    result
  end
.,.,

# reduce 72 omitted

module_eval(<<'.,.,', 'parser.racc', 155)
  def _reduce_73(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 158)
  def _reduce_74(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_78(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1])
    result
  end
.,.,

# reduce 79 omitted

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 174)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_82(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_83(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2])
    result
  end
.,.,

# reduce 84 omitted

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::InValueList.new(Array(val[1]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_86(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 87 omitted

module_eval(<<'.,.,', 'parser.racc', 192)
  def _reduce_88(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 193)
  def _reduce_89(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 196)
  def _reduce_90(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_91(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 200)
  def _reduce_92(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 204)
  def _reduce_93(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 207)
  def _reduce_94(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 95 omitted

# reduce 96 omitted

module_eval(<<'.,.,', 'parser.racc', 213)
  def _reduce_97(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2])
    result
  end
.,.,

# reduce 98 omitted

module_eval(<<'.,.,', 'parser.racc', 218)
  def _reduce_99(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 221)
  def _reduce_100(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1])
    result
  end
.,.,

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_105(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_113(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_114(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_115(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 247)
  def _reduce_116(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_117(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_118(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2])
    result
  end
.,.,

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_123(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(nil,val[1], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_124(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(nil,val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_125(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(val[1], val[2], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 264)
  def _reduce_126(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(val[1], val[2], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 268)
  def _reduce_127(val, _values, result)
     result = SQLParser::Statement::WhenClause.new(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 271)
  def _reduce_128(val, _values, result)
     result = [ val[0] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 272)
  def _reduce_129(val, _values, result)
     result = [ *val[0], val[1] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_130(val, _values, result)
     result = SQLParser::Statement::WhenClause.new(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_131(val, _values, result)
     result = [ val[0] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 279)
  def _reduce_132(val, _values, result)
     result = [ *val[0], val[1] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_133(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_134(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2])
    result
  end
.,.,

# reduce 135 omitted

# reduce 136 omitted

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_138(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2])
    result
  end
.,.,

# reduce 139 omitted

module_eval(<<'.,.,', 'parser.racc', 293)
  def _reduce_140(val, _values, result)
     result = val[0].new(val[1])
    result
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_145(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_150(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_151(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2])
    result
  end
.,.,

# reduce 152 omitted

# reduce 153 omitted

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_154(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new)
    result
  end
.,.,

# reduce 155 omitted

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_156(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 326)
  def _reduce_157(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_158(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_159(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_160(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 333)
  def _reduce_161(val, _values, result)
     result = SQLParser::Statement::FunctionCall.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 336)
  def _reduce_162(val, _values, result)
     result = SQLParser::Statement::BooleanFunction.new(val[0], val[2])
    result
  end
.,.,

# reduce 163 omitted

module_eval(<<'.,.,', 'parser.racc', 340)
  def _reduce_164(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 344)
  def _reduce_165(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 345)
  def _reduce_166(val, _values, result)
    result = SQLParser::Statement::Float.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 348)
  def _reduce_167(val, _values, result)
     result = SQLParser::Statement::UnaryPlus
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 349)
  def _reduce_168(val, _values, result)
     result = SQLParser::Statement::UnaryMinus
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 353)
  def _reduce_169(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 357)
  def _reduce_170(val, _values, result)
     result = SQLParser::Statement::String.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 358)
  def _reduce_171(val, _values, result)
     result = SQLParser::Statement::String.new('')
    result
  end
.,.,

# reduce 172 omitted

# reduce 173 omitted

module_eval(<<'.,.,', 'parser.racc', 361)
  def _reduce_174(val, _values, result)
     result = SQLParser::Statement::Variable.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 364)
  def _reduce_175(val, _values, result)
     result = SQLParser::Statement::True.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 365)
  def _reduce_176(val, _values, result)
     result = SQLParser::Statement::False.new
    result
  end
.,.,

# reduce 177 omitted

module_eval(<<'.,.,', 'parser.racc', 371)
  def _reduce_178(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module SQLParser
