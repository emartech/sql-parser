#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.1
# from Racc grammar file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 387)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    58,   123,   123,   271,   103,    77,   145,   122,   122,    43,
   234,   237,    84,    94,    72,   294,    13,   235,    15,    73,
    25,    27,   238,   -95,    78,   236,    80,    81,   -95,    82,
    83,    86,    58,   139,    86,    86,   280,   101,   102,   237,
   235,    43,   281,    36,   104,    32,    32,    32,   236,   148,
   149,    98,    25,    33,   272,    16,   273,   274,    60,    61,
    22,    48,    51,    53,    54,    55,    56,    57,    59,    62,
    58,    65,    66,    67,    69,    36,     9,    32,    10,    43,
    11,   213,   214,   152,    12,    33,   114,   113,    23,   225,
    60,    61,    70,    48,    51,    53,    54,    55,    56,    57,
    59,    62,    58,    65,    66,    67,    69,   197,   198,   220,
   221,    43,   222,   223,   224,    32,    74,    22,    22,    90,
   226,   227,   228,   229,   230,    92,    98,    93,    60,    61,
   -95,    48,    51,    53,    54,    55,    56,    57,    59,    62,
    58,    65,    66,    67,    69,   107,   108,    32,   109,    43,
   110,   111,   112,   115,   116,   117,    86,    22,   132,   133,
   134,   135,   136,    48,    51,    53,    54,    55,    56,    57,
    59,    62,    58,    65,    66,    67,    69,    86,   141,   139,
    22,    43,    86,    36,   152,    32,   178,   183,   192,   193,
   194,   195,   127,    33,   202,   139,   204,   205,    60,    61,
    22,    48,    51,    53,    54,    55,    56,    57,    59,    62,
    58,    65,    66,    67,    69,    36,    22,    32,   209,   154,
   211,   231,    86,   241,   242,    33,   243,   244,   245,   246,
    60,    61,   247,    48,    51,    53,    54,    55,    56,    57,
    59,    62,    58,    65,    66,    67,    69,   162,   248,   249,
   250,    43,   252,    36,   157,   158,   253,    86,   237,   265,
   266,   267,   269,    33,   270,   183,   276,    12,    60,    61,
   296,    48,    51,    53,    54,    55,    56,    57,    59,    62,
    58,    65,    66,    67,    69,    36,   297,    32,   299,    43,
   300,   302,    32,   307,   276,    33,   312,   314,   315,   317,
    60,    61,   237,    48,    51,    53,    54,    55,    56,    57,
    59,    62,    58,    65,    66,    67,    69,    86,   237,   322,
   323,    43,   325,    36,   326,    32,   327,   328,   329,    32,
   332,    86,   nil,    33,   nil,   nil,   nil,   nil,    60,    61,
   nil,    48,    51,    53,    54,    55,    56,    57,    59,    62,
    58,    65,    66,    67,    69,   nil,   nil,    32,   nil,    43,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    77,   nil,
    60,    61,   nil,    48,    51,    53,    54,    55,    56,    57,
    59,    62,    58,    65,    66,    67,    69,    78,   nil,    80,
    81,    43,    82,    83,   nil,    32,   nil,   nil,   nil,   nil,
   nil,   nil,   184,   nil,   nil,   nil,   nil,   nil,    60,    61,
   nil,    48,    51,    53,    54,    55,    56,    57,    59,    62,
    58,    65,    66,    67,    69,    36,   nil,    32,   nil,    43,
   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,
    60,    61,   nil,    48,    51,    53,    54,    55,    56,    57,
    59,    62,    58,    65,    66,    67,    69,   nil,   nil,   nil,
   nil,    43,   nil,    36,   nil,    32,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    60,    61,
   nil,    48,    51,    53,    54,    55,    56,    57,    59,    62,
    58,    65,    66,    67,    69,    36,   nil,    32,   nil,    43,
   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,
    60,    61,   nil,    48,    51,    53,    54,    55,    56,    57,
    59,    62,    58,    65,    66,    67,    69,   nil,   nil,   nil,
   nil,    43,   nil,    36,   nil,    32,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    60,    61,
   nil,    48,    51,    53,    54,    55,    56,    57,    59,    62,
    58,    65,    66,    67,    69,    36,   nil,    32,   nil,    43,
   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,
    60,    61,   nil,    48,    51,    53,    54,    55,    56,    57,
    59,    62,    58,    65,    66,    67,    69,   nil,   nil,   nil,
   nil,    43,   nil,    36,   nil,    32,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    60,    61,
   nil,    48,    51,    53,    54,    55,    56,    57,    59,    62,
    58,    65,    66,    67,    69,    36,   nil,    32,   nil,   154,
   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,
    60,    61,   nil,    48,    51,    53,    54,    55,    56,    57,
    59,    62,    58,    65,    66,    67,    69,   162,   nil,   nil,
   nil,    43,   nil,    36,   157,   158,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    60,    61,
   nil,    48,    51,    53,    54,    55,    56,    57,    59,    62,
    58,    65,    66,    67,    69,    36,   nil,    32,   nil,    43,
   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,
    60,    61,   nil,    48,    51,    53,    54,    55,    56,    57,
    59,    62,   nil,    65,    66,    67,    69,   nil,    58,   nil,
   nil,   nil,   nil,    36,   nil,    32,   nil,   154,   nil,   nil,
   nil,   nil,   nil,    33,   nil,   nil,   nil,    12,    60,    61,
   nil,    48,    51,    53,    54,    55,    56,    57,    59,    62,
    58,    65,    66,    67,    69,   162,   nil,   nil,   nil,   154,
   nil,    36,   157,   158,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    33,   nil,   nil,   nil,   nil,    60,    61,   nil,    48,
    51,    53,    54,    55,    56,    57,    59,    62,    58,    65,
    66,    67,    69,    36,   157,   239,   nil,    43,   nil,   nil,
   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    60,    61,
   nil,    48,    51,    53,    54,    55,    56,    57,    59,    62,
    58,    65,    66,    67,    69,   nil,   nil,   nil,   nil,   257,
   nil,    36,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    33,   nil,   nil,   nil,   nil,    60,    61,   nil,    48,
    51,    53,    54,    55,    56,    57,    59,    62,    58,    65,
    66,    67,    69,    36,   nil,   239,   nil,    43,   nil,   nil,
   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    60,    61,
   nil,    48,    51,    53,    54,    55,    56,    57,    59,    62,
    58,    65,    66,    67,    69,   nil,   nil,   nil,   nil,   257,
   nil,    36,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    33,   nil,   nil,   nil,   nil,    60,    61,   nil,    48,
    51,    53,    54,    55,    56,    57,    59,    62,    58,    65,
    66,    67,    69,    36,   nil,   239,   nil,   257,   nil,   nil,
   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    60,    61,
   nil,    48,    51,    53,    54,    55,    56,    57,    59,    62,
    58,    65,    66,    67,    69,   nil,   nil,   nil,   nil,   257,
   nil,    36,   nil,   239,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    33,   nil,   nil,   nil,   nil,    60,    61,   nil,    48,
    51,    53,    54,    55,    56,    57,    59,    62,    58,    65,
    66,    67,    69,    36,   nil,   239,   nil,   257,   nil,   nil,
   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    60,    61,
   nil,    48,    51,    53,    54,    55,    56,    57,    59,    62,
    58,    65,    66,    67,    69,   nil,   nil,   nil,   nil,   257,
   nil,    36,   nil,   239,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    33,   nil,   nil,   nil,   nil,    60,    61,   nil,    48,
    51,    53,    54,    55,    56,    57,    59,    62,    58,    65,
    66,    67,    69,    36,   nil,   239,   nil,   257,   nil,   nil,
   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    60,    61,
   nil,    48,    51,    53,    54,    55,    56,    57,    59,    62,
    58,    65,    66,    67,    69,   nil,   nil,   nil,   nil,   257,
   nil,    36,   nil,   239,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    33,   nil,   nil,   nil,   nil,    60,    61,   nil,    48,
    51,    53,    54,    55,    56,    57,    59,    62,    58,    65,
    66,    67,    69,    36,   nil,   239,   nil,   257,   nil,   nil,
   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    60,    61,
   nil,    48,    51,    53,    54,    55,    56,    57,    59,    62,
    58,    65,    66,    67,    69,   nil,   nil,   nil,   nil,    43,
   288,    36,   nil,   239,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    33,   nil,   nil,   nil,   nil,    60,    61,   nil,    48,
    51,    53,    54,    55,    56,    57,    59,    62,    58,    65,
    66,    67,    69,    36,   nil,    32,   nil,   154,   nil,   nil,
   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    60,    61,
   nil,    48,    51,    53,    54,    55,    56,    57,    59,    62,
   nil,    65,    66,    67,    69,   162,    58,   nil,   nil,   nil,
   nil,    36,   157,   158,   nil,   154,   nil,   nil,   nil,   nil,
   nil,    33,   nil,   nil,   nil,   nil,    60,    61,   nil,    48,
    51,    53,    54,    55,    56,    57,    59,    62,   nil,    65,
    66,    67,    69,   162,    58,   nil,   nil,   nil,   nil,    36,
   157,   158,   nil,   154,   nil,   nil,   nil,   nil,   nil,    33,
   nil,   nil,   nil,   nil,    60,    61,   nil,    48,    51,    53,
    54,    55,    56,    57,    59,    62,    58,    65,    66,    67,
    69,   162,   nil,   nil,   nil,    43,   nil,    36,   157,   158,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,
   nil,   nil,    60,    61,   nil,    48,    51,    53,    54,    55,
    56,    57,    59,    62,    58,    65,    66,    67,    69,    36,
   nil,    32,   nil,    43,   nil,   nil,   nil,   nil,   nil,    33,
   nil,   nil,   nil,   nil,    60,    61,   nil,    48,    51,    53,
    54,    55,    56,    57,    59,    62,    58,    65,    66,    67,
    69,   nil,   nil,   nil,   nil,    43,   nil,    36,   nil,    32,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,
   nil,   nil,    60,    61,   nil,    48,    51,    53,    54,    55,
    56,    57,    59,    62,    58,    65,    66,    67,    69,    36,
   nil,    32,   nil,    43,   nil,   nil,   nil,   nil,   nil,    33,
   nil,   nil,   nil,    12,    60,    61,   nil,    48,    51,    53,
    54,    55,    56,    57,    59,    62,   nil,    65,    66,    67,
    69,   nil,    58,   nil,   nil,   nil,   nil,    36,   nil,    32,
   nil,   154,   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,
   nil,   nil,    60,    61,   nil,    48,    51,    53,    54,    55,
    56,    57,    59,    62,   nil,    65,    66,    67,    69,   162,
    58,   nil,   nil,   nil,   nil,    36,   157,   158,   nil,   154,
   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,
    60,    61,   nil,    48,    51,    53,    54,    55,    56,    57,
    59,    62,    58,    65,    66,    67,    69,   162,   nil,   nil,
   nil,    43,   nil,    36,   157,   158,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    60,    61,
   nil,    48,    51,    53,    54,    55,    56,    57,    59,    62,
    58,    65,    66,    67,    69,    36,   nil,    32,   nil,   257,
   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,
    60,    61,   nil,    48,    51,    53,    54,    55,    56,    57,
    59,    62,    58,    65,    66,    67,    69,   nil,   nil,   nil,
   nil,   257,   nil,    36,   nil,   239,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    60,    61,
   nil,    48,    51,    53,    54,    55,    56,    57,    59,    62,
    58,    65,    66,    67,    69,    36,   nil,   239,   nil,    43,
   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,    12,
    60,    61,   nil,    48,    51,    53,    54,    55,    56,    57,
    59,    62,    58,    65,    66,    67,    69,   nil,   nil,   nil,
   nil,    43,   288,    36,   nil,    32,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    60,    61,
   nil,    48,    51,    53,    54,    55,    56,    57,    59,    62,
    58,    65,    66,    67,    69,    36,   nil,    32,   nil,    43,
   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,
    60,    61,   nil,    48,    51,    53,    54,    55,    56,    57,
    59,    62,    58,    65,    66,    67,    69,   nil,   nil,   nil,
   nil,   257,   nil,    36,   nil,    32,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    60,    61,
   nil,    48,    51,    53,    54,    55,    56,    57,    59,    62,
    58,    65,    66,    67,    69,    36,   nil,   239,   nil,   257,
   nil,   nil,   nil,   nil,   nil,    33,   nil,  -167,   nil,   nil,
    60,    61,   nil,    48,    51,    53,    54,    55,    56,    57,
    59,    62,   nil,    65,    66,    67,    69,  -167,  -167,   nil,
  -167,  -167,  -167,    36,   nil,   239,   nil,   nil,  -167,  -167,
  -167,  -167,  -167,    33,   nil,   nil,   nil,  -179,    60,    61,
  -179,    48,    51,    53,    54,    55,    56,    57,    59,    62,
   nil,    65,    66,    67,    69,   nil,   nil,  -179,  -179,   nil,
  -179,  -179,  -179,    77,   nil,   nil,   nil,   nil,  -179,  -179,
  -179,  -179,  -179,   nil,    77,   nil,   nil,   nil,  -179,  -179,
  -179,   nil,    78,    76,    80,    81,   nil,    82,    83,   262,
   263,   nil,   nil,    78,   nil,    80,    81,    77,    82,    83,
   nil,   126,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   127,   nil,   nil,   nil,   nil,   nil,    78,   nil,    80,    81,
   nil,    82,    83 ]

racc_action_check = [
    12,    74,   195,   218,    37,    87,    93,    74,   195,    12,
   158,   160,    18,    31,    14,   239,     1,   159,     7,    14,
    12,    12,   160,   158,    87,   159,    87,    87,   239,    87,
    87,    93,    27,    87,    18,    31,   224,    34,    34,   218,
   292,    27,   224,    12,    37,    12,    74,   195,   292,    96,
    96,    96,    27,    12,   220,     9,   220,   220,    12,    12,
    10,    12,    12,    12,    12,    12,    12,    12,    12,    12,
    33,    12,    12,    12,    12,    27,     0,    27,     0,    33,
     0,   151,   151,   151,     0,    27,    62,    62,    11,   156,
    27,    27,    13,    27,    27,    27,    27,    27,    27,    27,
    27,    27,    38,    27,    27,    27,    27,   120,   120,   156,
   156,    38,   156,   156,   156,    33,    15,    16,    23,    24,
   156,   156,   156,   156,   156,    29,    33,    30,    33,    33,
    32,    33,    33,    33,    33,    33,    33,    33,    33,    33,
    43,    33,    33,    33,    33,    51,    53,    38,    54,    43,
    55,    56,    57,    69,    72,    73,    76,    77,    78,    79,
    81,    82,    83,    38,    38,    38,    38,    38,    38,    38,
    38,    38,    92,    38,    38,    38,    38,    84,    88,    89,
    90,    92,    94,    43,    97,    43,   100,   106,   113,   116,
   117,   118,   125,    43,   127,   128,   129,   130,    43,    43,
   132,    43,    43,    43,    43,    43,    43,    43,    43,    43,
    98,    43,    43,    43,    43,    92,   133,    92,   141,    98,
   142,   157,   178,   184,   185,    92,   186,   187,   188,   189,
    92,    92,   190,    92,    92,    92,    92,    92,    92,    92,
    92,    92,   101,    92,    92,    92,    92,    98,   191,   193,
   194,   101,   200,    98,    98,    98,   201,   204,   208,   210,
   211,   212,   216,    98,   217,   219,   222,   231,    98,    98,
   249,    98,    98,    98,    98,    98,    98,    98,    98,    98,
   102,    98,    98,    98,    98,   101,   250,   101,   254,   102,
   255,   263,   266,   268,   273,   101,   275,   280,   289,   297,
   101,   101,   301,   101,   101,   101,   101,   101,   101,   101,
   101,   101,   103,   101,   101,   101,   101,   302,   303,   304,
   309,   103,   313,   102,   316,   102,   317,   319,   320,   322,
   327,   329,   nil,   102,   nil,   nil,   nil,   nil,   102,   102,
   nil,   102,   102,   102,   102,   102,   102,   102,   102,   102,
   104,   102,   102,   102,   102,   nil,   nil,   103,   nil,   104,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   143,   nil,
   103,   103,   nil,   103,   103,   103,   103,   103,   103,   103,
   103,   103,   107,   103,   103,   103,   103,   143,   nil,   143,
   143,   107,   143,   143,   nil,   104,   nil,   nil,   nil,   nil,
   nil,   nil,   107,   nil,   nil,   nil,   nil,   nil,   104,   104,
   nil,   104,   104,   104,   104,   104,   104,   104,   104,   104,
   108,   104,   104,   104,   104,   107,   nil,   107,   nil,   108,
   nil,   nil,   nil,   nil,   nil,   107,   nil,   nil,   nil,   nil,
   107,   107,   nil,   107,   107,   107,   107,   107,   107,   107,
   107,   107,   109,   107,   107,   107,   107,   nil,   nil,   nil,
   nil,   109,   nil,   108,   nil,   108,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   108,   nil,   nil,   nil,   nil,   108,   108,
   nil,   108,   108,   108,   108,   108,   108,   108,   108,   108,
   110,   108,   108,   108,   108,   109,   nil,   109,   nil,   110,
   nil,   nil,   nil,   nil,   nil,   109,   nil,   nil,   nil,   nil,
   109,   109,   nil,   109,   109,   109,   109,   109,   109,   109,
   109,   109,   111,   109,   109,   109,   109,   nil,   nil,   nil,
   nil,   111,   nil,   110,   nil,   110,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   110,   nil,   nil,   nil,   nil,   110,   110,
   nil,   110,   110,   110,   110,   110,   110,   110,   110,   110,
   112,   110,   110,   110,   110,   111,   nil,   111,   nil,   112,
   nil,   nil,   nil,   nil,   nil,   111,   nil,   nil,   nil,   nil,
   111,   111,   nil,   111,   111,   111,   111,   111,   111,   111,
   111,   111,   126,   111,   111,   111,   111,   nil,   nil,   nil,
   nil,   126,   nil,   112,   nil,   112,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   112,   nil,   nil,   nil,   nil,   112,   112,
   nil,   112,   112,   112,   112,   112,   112,   112,   112,   112,
   139,   112,   112,   112,   112,   126,   nil,   126,   nil,   139,
   nil,   nil,   nil,   nil,   nil,   126,   nil,   nil,   nil,   nil,
   126,   126,   nil,   126,   126,   126,   126,   126,   126,   126,
   126,   126,   149,   126,   126,   126,   126,   139,   nil,   nil,
   nil,   149,   nil,   139,   139,   139,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   139,   nil,   nil,   nil,   nil,   139,   139,
   nil,   139,   139,   139,   139,   139,   139,   139,   139,   139,
   152,   139,   139,   139,   139,   149,   nil,   149,   nil,   152,
   nil,   nil,   nil,   nil,   nil,   149,   nil,   nil,   nil,   nil,
   149,   149,   nil,   149,   149,   149,   149,   149,   149,   149,
   149,   149,   nil,   149,   149,   149,   149,   nil,   154,   nil,
   nil,   nil,   nil,   152,   nil,   152,   nil,   154,   nil,   nil,
   nil,   nil,   nil,   152,   nil,   nil,   nil,   154,   152,   152,
   nil,   152,   152,   152,   152,   152,   152,   152,   152,   152,
   162,   152,   152,   152,   152,   154,   nil,   nil,   nil,   162,
   nil,   154,   154,   154,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   154,   nil,   nil,   nil,   nil,   154,   154,   nil,   154,
   154,   154,   154,   154,   154,   154,   154,   154,   202,   154,
   154,   154,   154,   162,   162,   162,   nil,   202,   nil,   nil,
   nil,   nil,   nil,   162,   nil,   nil,   nil,   nil,   162,   162,
   nil,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   205,   162,   162,   162,   162,   nil,   nil,   nil,   nil,   205,
   nil,   202,   nil,   202,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   202,   nil,   nil,   nil,   nil,   202,   202,   nil,   202,
   202,   202,   202,   202,   202,   202,   202,   202,   214,   202,
   202,   202,   202,   205,   nil,   205,   nil,   214,   nil,   nil,
   nil,   nil,   nil,   205,   nil,   nil,   nil,   nil,   205,   205,
   nil,   205,   205,   205,   205,   205,   205,   205,   205,   205,
   221,   205,   205,   205,   205,   nil,   nil,   nil,   nil,   221,
   nil,   214,   nil,   214,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   214,   nil,   nil,   nil,   nil,   214,   214,   nil,   214,
   214,   214,   214,   214,   214,   214,   214,   214,   223,   214,
   214,   214,   214,   221,   nil,   221,   nil,   223,   nil,   nil,
   nil,   nil,   nil,   221,   nil,   nil,   nil,   nil,   221,   221,
   nil,   221,   221,   221,   221,   221,   221,   221,   221,   221,
   225,   221,   221,   221,   221,   nil,   nil,   nil,   nil,   225,
   nil,   223,   nil,   223,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   223,   nil,   nil,   nil,   nil,   223,   223,   nil,   223,
   223,   223,   223,   223,   223,   223,   223,   223,   226,   223,
   223,   223,   223,   225,   nil,   225,   nil,   226,   nil,   nil,
   nil,   nil,   nil,   225,   nil,   nil,   nil,   nil,   225,   225,
   nil,   225,   225,   225,   225,   225,   225,   225,   225,   225,
   227,   225,   225,   225,   225,   nil,   nil,   nil,   nil,   227,
   nil,   226,   nil,   226,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   226,   nil,   nil,   nil,   nil,   226,   226,   nil,   226,
   226,   226,   226,   226,   226,   226,   226,   226,   228,   226,
   226,   226,   226,   227,   nil,   227,   nil,   228,   nil,   nil,
   nil,   nil,   nil,   227,   nil,   nil,   nil,   nil,   227,   227,
   nil,   227,   227,   227,   227,   227,   227,   227,   227,   227,
   229,   227,   227,   227,   227,   nil,   nil,   nil,   nil,   229,
   nil,   228,   nil,   228,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   228,   nil,   nil,   nil,   nil,   228,   228,   nil,   228,
   228,   228,   228,   228,   228,   228,   228,   228,   230,   228,
   228,   228,   228,   229,   nil,   229,   nil,   230,   nil,   nil,
   nil,   nil,   nil,   229,   nil,   nil,   nil,   nil,   229,   229,
   nil,   229,   229,   229,   229,   229,   229,   229,   229,   229,
   234,   229,   229,   229,   229,   nil,   nil,   nil,   nil,   234,
   234,   230,   nil,   230,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   230,   nil,   nil,   nil,   nil,   230,   230,   nil,   230,
   230,   230,   230,   230,   230,   230,   230,   230,   235,   230,
   230,   230,   230,   234,   nil,   234,   nil,   235,   nil,   nil,
   nil,   nil,   nil,   234,   nil,   nil,   nil,   nil,   234,   234,
   nil,   234,   234,   234,   234,   234,   234,   234,   234,   234,
   nil,   234,   234,   234,   234,   235,   236,   nil,   nil,   nil,
   nil,   235,   235,   235,   nil,   236,   nil,   nil,   nil,   nil,
   nil,   235,   nil,   nil,   nil,   nil,   235,   235,   nil,   235,
   235,   235,   235,   235,   235,   235,   235,   235,   nil,   235,
   235,   235,   235,   236,   237,   nil,   nil,   nil,   nil,   236,
   236,   236,   nil,   237,   nil,   nil,   nil,   nil,   nil,   236,
   nil,   nil,   nil,   nil,   236,   236,   nil,   236,   236,   236,
   236,   236,   236,   236,   236,   236,   238,   236,   236,   236,
   236,   237,   nil,   nil,   nil,   238,   nil,   237,   237,   237,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   237,   nil,   nil,
   nil,   nil,   237,   237,   nil,   237,   237,   237,   237,   237,
   237,   237,   237,   237,   248,   237,   237,   237,   237,   238,
   nil,   238,   nil,   248,   nil,   nil,   nil,   nil,   nil,   238,
   nil,   nil,   nil,   nil,   238,   238,   nil,   238,   238,   238,
   238,   238,   238,   238,   238,   238,   253,   238,   238,   238,
   238,   nil,   nil,   nil,   nil,   253,   nil,   248,   nil,   248,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   248,   nil,   nil,
   nil,   nil,   248,   248,   nil,   248,   248,   248,   248,   248,
   248,   248,   248,   248,   257,   248,   248,   248,   248,   253,
   nil,   253,   nil,   257,   nil,   nil,   nil,   nil,   nil,   253,
   nil,   nil,   nil,   257,   253,   253,   nil,   253,   253,   253,
   253,   253,   253,   253,   253,   253,   nil,   253,   253,   253,
   253,   nil,   262,   nil,   nil,   nil,   nil,   257,   nil,   257,
   nil,   262,   nil,   nil,   nil,   nil,   nil,   257,   nil,   nil,
   nil,   nil,   257,   257,   nil,   257,   257,   257,   257,   257,
   257,   257,   257,   257,   nil,   257,   257,   257,   257,   262,
   265,   nil,   nil,   nil,   nil,   262,   262,   262,   nil,   265,
   nil,   nil,   nil,   nil,   nil,   262,   nil,   nil,   nil,   nil,
   262,   262,   nil,   262,   262,   262,   262,   262,   262,   262,
   262,   262,   269,   262,   262,   262,   262,   265,   nil,   nil,
   nil,   269,   nil,   265,   265,   265,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   265,   nil,   nil,   nil,   nil,   265,   265,
   nil,   265,   265,   265,   265,   265,   265,   265,   265,   265,
   272,   265,   265,   265,   265,   269,   nil,   269,   nil,   272,
   nil,   nil,   nil,   nil,   nil,   269,   nil,   nil,   nil,   nil,
   269,   269,   nil,   269,   269,   269,   269,   269,   269,   269,
   269,   269,   274,   269,   269,   269,   269,   nil,   nil,   nil,
   nil,   274,   nil,   272,   nil,   272,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   272,   nil,   nil,   nil,   nil,   272,   272,
   nil,   272,   272,   272,   272,   272,   272,   272,   272,   272,
   276,   272,   272,   272,   272,   274,   nil,   274,   nil,   276,
   nil,   nil,   nil,   nil,   nil,   274,   nil,   nil,   nil,   276,
   274,   274,   nil,   274,   274,   274,   274,   274,   274,   274,
   274,   274,   294,   274,   274,   274,   274,   nil,   nil,   nil,
   nil,   294,   294,   276,   nil,   276,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   276,   nil,   nil,   nil,   nil,   276,   276,
   nil,   276,   276,   276,   276,   276,   276,   276,   276,   276,
   300,   276,   276,   276,   276,   294,   nil,   294,   nil,   300,
   nil,   nil,   nil,   nil,   nil,   294,   nil,   nil,   nil,   nil,
   294,   294,   nil,   294,   294,   294,   294,   294,   294,   294,
   294,   294,   312,   294,   294,   294,   294,   nil,   nil,   nil,
   nil,   312,   nil,   300,   nil,   300,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   300,   nil,   nil,   nil,   nil,   300,   300,
   nil,   300,   300,   300,   300,   300,   300,   300,   300,   300,
   323,   300,   300,   300,   300,   312,   nil,   312,   nil,   323,
   nil,   nil,   nil,   nil,   nil,   312,   nil,   315,   nil,   nil,
   312,   312,   nil,   312,   312,   312,   312,   312,   312,   312,
   312,   312,   nil,   312,   312,   312,   312,   315,   315,   nil,
   315,   315,   315,   323,   nil,   323,   nil,   nil,   315,   315,
   315,   315,   315,   323,   nil,   nil,   nil,   167,   323,   323,
   167,   323,   323,   323,   323,   323,   323,   323,   323,   323,
   nil,   323,   323,   323,   323,   nil,   nil,   167,   167,   nil,
   167,   167,   167,   207,   nil,   nil,   nil,   nil,   167,   167,
   167,   167,   167,   nil,    17,   nil,   nil,   nil,   167,   167,
   167,   nil,   207,    17,   207,   207,   nil,   207,   207,   207,
   207,   nil,   nil,    17,   nil,    17,    17,    75,    17,    17,
   nil,    75,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    75,   nil,   nil,   nil,   nil,   nil,    75,   nil,    75,    75,
   nil,    75,    75 ]

racc_action_pointer = [
    59,    16,   nil,   nil,   nil,   nil,   nil,    16,   nil,    37,
     9,    66,    -6,    92,    10,   113,    66,  1883,   -17,   nil,
   nil,   nil,   nil,    67,    97,   nil,   nil,    26,   nil,   114,
    99,   -16,   102,    64,   -27,   nil,   nil,   -22,    96,   nil,
   nil,   nil,   nil,   134,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   130,   nil,   131,   133,   135,   136,   137,   nil,   nil,
   nil,   nil,    11,   nil,   nil,   nil,   nil,   nil,   nil,    72,
   nil,   nil,   149,   149,    -5,  1906,   105,   106,   127,   128,
   nil,   126,   127,   128,   126,   nil,   nil,    -6,   137,   140,
   129,   nil,   166,   -20,   131,   nil,   -11,   122,   204,   nil,
   158,   236,   274,   306,   344,   nil,   171,   376,   414,   446,
   484,   516,   554,   113,   nil,   nil,   183,   183,   180,   nil,
    94,   nil,   nil,   nil,   nil,   168,   586,   179,   156,   185,
   174,   nil,   149,   165,   nil,   nil,   nil,   nil,   nil,   624,
   nil,   212,   180,   357,   nil,   nil,   nil,   nil,   nil,   656,
   nil,    21,   694,   nil,   732,   nil,    66,   206,    -5,   -28,
   -41,   nil,   764,   nil,   nil,   nil,   nil,  1834,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   171,   nil,
   nil,   nil,   nil,   nil,   207,   208,   210,   211,   212,   213,
   216,   237,   nil,   242,   246,    -4,   nil,   nil,   nil,   nil,
   236,   245,   802,   nil,   206,   834,   nil,  1872,   206,   nil,
   217,   257,   201,   nil,   872,   nil,   199,   248,   -13,   249,
    10,   904,   251,   942,    -7,   974,  1012,  1044,  1082,  1114,
  1152,   242,   nil,   nil,  1184,  1222,  1260,  1298,  1330,     0,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1368,   262,
   276,   nil,   nil,  1400,   272,   279,   nil,  1438,   nil,   nil,
   nil,   nil,  1476,   276,   nil,  1514,   241,   nil,   233,  1546,
   nil,   nil,  1584,   279,  1616,   251,  1654,   nil,   nil,   nil,
   248,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   282,
   nil,   nil,    -5,   nil,  1686,   nil,   nil,   293,   nil,   nil,
  1724,   250,   266,   266,   308,   nil,   nil,   nil,   nil,   275,
   nil,   nil,  1756,   306,   nil,  1794,   308,   319,   nil,   311,
   317,   nil,   278,  1794,   nil,   nil,   nil,   322,   nil,   280,
   nil,   nil,   nil,   nil ]

racc_action_default = [
  -185,  -185,    -1,    -2,    -3,    -4,    -5,    -7,   -22,  -185,
  -185,  -185,  -185,  -185,    -9,  -185,  -185,  -185,   -50,   -51,
   -53,   -54,   -95,  -185,   -35,   -36,   -37,  -185,   -39,   -41,
  -185,   -45,  -175,  -185,  -138,  -139,  -140,  -143,  -185,  -145,
  -146,  -147,  -148,  -185,  -150,  -151,  -152,  -153,  -154,  -156,
  -157,  -185,  -159,  -185,  -185,  -185,  -185,  -185,  -171,  -172,
  -173,  -174,  -185,  -178,  -179,  -180,  -181,  -182,  -183,  -185,
   334,    -6,  -185,  -185,  -185,  -185,  -185,  -185,  -185,  -185,
   -58,   -60,   -62,   -63,  -185,   -49,  -175,   -70,   -74,   -70,
  -185,   -38,  -185,  -185,  -185,   -44,  -185,  -185,  -185,  -134,
  -185,  -185,  -185,  -185,  -185,  -144,  -185,  -185,  -185,  -185,
  -185,  -185,  -185,  -185,  -177,  -184,  -185,  -185,    -8,   -13,
   -18,   -15,   -16,   -17,   -23,  -185,  -185,  -185,   -70,   -28,
  -185,   -55,  -185,  -185,   -59,   -61,   -64,   -48,   -26,  -185,
   -34,  -185,   -72,   -47,   -40,   -42,  -155,   -43,  -126,  -185,
  -135,  -185,  -185,  -131,  -185,   -81,  -185,  -185,  -175,   -98,
  -185,  -100,  -185,  -104,  -105,  -106,  -107,  -109,  -110,  -111,
  -112,  -113,  -114,  -115,  -122,  -123,  -124,  -125,  -185,  -136,
  -137,  -141,  -142,  -149,  -185,  -185,  -185,  -185,  -185,  -185,
  -185,  -169,  -176,  -185,  -185,  -185,   -14,   -19,   -20,   -24,
  -185,   -32,  -185,   -25,  -185,  -185,   -56,  -185,   -71,   -75,
   -79,  -185,  -185,  -128,  -185,  -132,  -185,  -185,  -185,  -124,
  -185,  -185,  -185,  -185,  -185,  -185,  -185,  -185,  -185,  -185,
  -185,  -185,   -52,   -94,  -185,  -185,  -185,  -185,  -185,  -175,
  -103,  -158,  -160,  -161,  -162,  -163,  -164,  -165,  -185,  -185,
  -185,   -12,   -30,  -185,  -185,   -89,   -27,  -185,   -29,   -57,
   -65,   -66,  -185,  -185,   -46,  -185,  -185,  -127,  -185,  -185,
   -21,  -108,  -185,  -185,  -185,  -185,  -185,   -85,   -86,   -91,
  -185,   -93,  -116,  -117,  -118,  -119,  -120,  -121,  -166,  -185,
  -101,  -102,   -99,  -133,  -185,  -170,   -10,  -185,   -31,   -33,
  -185,   -67,  -185,   -80,   -73,   -77,   -78,  -129,  -130,  -185,
   -84,   -90,  -185,  -185,   -92,  -168,  -185,  -185,   -88,  -185,
   -69,   -97,  -185,  -185,   -83,   -87,  -167,  -185,   -68,  -185,
   -76,   -82,   -11,   -96 ]

racc_goto_table = [
    85,    31,   121,   190,   160,   128,    17,   200,   167,   119,
    99,   305,    75,    95,    97,   232,    31,   153,   254,    87,
   124,    28,    30,   277,   138,     1,   142,    18,   290,   291,
     2,     3,   106,    18,     4,     5,    91,    30,     6,     7,
    18,    14,    71,   118,   196,   208,   125,    24,    88,   167,
   140,   144,    89,   210,   264,   233,   259,   260,   130,   261,
   218,   319,   320,   304,   167,   203,   137,   330,   292,   240,
   199,   215,   167,   150,   310,   146,   147,    96,   151,   105,
   232,    31,   nil,   nil,   181,   182,   143,   nil,   258,   nil,
   179,   180,   313,   nil,   131,   nil,   185,   186,   187,   188,
   189,   191,    30,   nil,   275,   nil,   279,    18,   282,   283,
   284,   285,   286,   287,   nil,   201,   318,   nil,   nil,   nil,
   nil,   nil,   nil,   121,   nil,   289,   nil,   nil,   nil,   207,
   251,   232,   nil,   256,   298,   nil,   nil,   nil,   212,   295,
   nil,   216,   nil,   219,   nil,   167,   167,   167,   nil,   206,
    18,   nil,   nil,   nil,   nil,   309,   nil,   311,   nil,   nil,
   146,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   301,   nil,
   nil,   303,   167,   nil,   nil,   167,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   316,   130,   nil,   nil,   nil,
   nil,   255,   nil,   nil,   306,   324,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   268,   nil,   nil,   331,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   191,   nil,   nil,   nil,   293,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   191,   nil,   nil,
   nil,   nil,   201,   nil,   nil,   nil,   106,   nil,   nil,   nil,
   306,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   308,   nil,
   nil,   nil,   nil,   nil,   nil,   255,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   191,   321,   nil,   nil,   nil,   nil,   255,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   333 ]

racc_goto_check = [
    23,    26,    14,    85,    47,    20,    17,    25,    65,    11,
    74,    51,    17,    23,    71,    15,    26,    73,    27,    17,
    18,    31,    34,    55,    21,     1,    21,    38,    60,    60,
     2,     3,    26,    38,     4,     5,    31,    34,     6,     7,
    38,     8,     9,    10,    13,    47,    19,    28,    29,    65,
    30,    32,    35,    36,    37,    40,    44,    45,    23,    46,
    47,    48,    49,    50,    65,    21,    23,    51,    59,    61,
    18,    73,    65,    74,    55,    23,    23,    70,    72,    77,
    15,    26,   nil,   nil,    71,    71,    17,   nil,    24,   nil,
    26,    26,    27,   nil,    38,   nil,    26,    26,    26,    26,
    26,    26,    34,   nil,    24,   nil,    24,    38,    24,    24,
    24,    24,    24,    24,   nil,    26,    27,   nil,   nil,   nil,
   nil,   nil,   nil,    14,   nil,    85,   nil,   nil,   nil,    17,
    11,    15,   nil,    20,    25,   nil,   nil,   nil,    26,    85,
   nil,    26,   nil,    26,   nil,    65,    65,    65,   nil,    38,
    38,   nil,   nil,   nil,   nil,    24,   nil,    24,   nil,   nil,
    23,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,   nil,
   nil,    47,    65,   nil,   nil,    65,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    85,    23,   nil,   nil,   nil,
   nil,    26,   nil,   nil,    14,    24,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    26,   nil,   nil,    24,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    26,   nil,   nil,   nil,    26,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,
   nil,   nil,    26,   nil,   nil,   nil,    26,   nil,   nil,   nil,
    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,
   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    26,    23,   nil,   nil,   nil,   nil,    26,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    23 ]

racc_goto_pointer = [
   nil,    25,    30,    31,    34,    35,    38,    39,    34,    28,
   -31,   -65,   nil,   -76,   -72,  -142,   nil,    -4,   -55,   -29,
   -71,   -63,   nil,   -18,  -117,  -119,   -11,  -184,    35,    24,
   -38,     9,   -41,   nil,    10,    28,   -89,  -156,    17,   nil,
  -102,   nil,   nil,   nil,  -151,  -150,  -148,   -94,  -241,  -240,
  -203,  -255,   nil,   nil,   nil,  -199,   nil,   nil,   nil,  -169,
  -207,   -93,   nil,   nil,   nil,   -90,   nil,   nil,   nil,   nil,
    44,   -19,   -19,   -80,   -23,   nil,   nil,    41,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  -109,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   217,   nil,   nil,
   nil,   nil,   120,   nil,    41,   155,     8,   nil,   nil,   nil,
   nil,   nil,   129,    49,   156,   nil,   176,   nil,   nil,   nil,
   nil,   nil,    26,    29,   100,   nil,   nil,   nil,    50,    19,
   278,    20,    21,    79,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   175,   169,   170,   nil,   171,   172,   173,   159,
   161,   163,   164,   165,   166,    64,   168,   174,   177,    35,
   nil,    34,   nil,   nil,   nil,    37,    38,    39,    40,    42,
    44,    45,    46,    47,    52,   nil,    63,    68 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 83, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  3, 85, :_reduce_6,
  0, 90, :_reduce_none,
  3, 90, :_reduce_8,
  0, 91, :_reduce_none,
  5, 91, :_reduce_10,
  8, 91, :_reduce_11,
  3, 92, :_reduce_12,
  1, 92, :_reduce_none,
  2, 93, :_reduce_14,
  1, 94, :_reduce_none,
  1, 94, :_reduce_16,
  1, 94, :_reduce_17,
  0, 95, :_reduce_18,
  1, 95, :_reduce_19,
  1, 95, :_reduce_20,
  3, 97, :_reduce_21,
  1, 89, :_reduce_none,
  4, 86, :_reduce_23,
  5, 86, :_reduce_24,
  5, 87, :_reduce_25,
  4, 88, :_reduce_26,
  3, 102, :_reduce_27,
  1, 102, :_reduce_28,
  3, 104, :_reduce_29,
  3, 101, :_reduce_30,
  3, 107, :_reduce_31,
  1, 107, :_reduce_none,
  4, 100, :_reduce_33,
  4, 98, :_reduce_34,
  2, 98, :_reduce_35,
  1, 113, :_reduce_36,
  1, 113, :_reduce_37,
  2, 110, :_reduce_38,
  1, 110, :_reduce_39,
  3, 114, :_reduce_40,
  1, 114, :_reduce_none,
  3, 115, :_reduce_42,
  3, 115, :_reduce_43,
  2, 115, :_reduce_44,
  1, 115, :_reduce_none,
  4, 111, :_reduce_46,
  2, 117, :_reduce_47,
  3, 99, :_reduce_48,
  2, 99, :_reduce_49,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 122, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  3, 123, :_reduce_55,
  4, 123, :_reduce_56,
  5, 124, :_reduce_57,
  1, 125, :_reduce_58,
  2, 125, :_reduce_59,
  1, 125, :_reduce_60,
  2, 125, :_reduce_61,
  1, 125, :_reduce_62,
  1, 125, :_reduce_63,
  2, 125, :_reduce_64,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  2, 127, :_reduce_67,
  4, 128, :_reduce_68,
  1, 130, :_reduce_none,
  0, 103, :_reduce_none,
  2, 103, :_reduce_71,
  0, 118, :_reduce_none,
  3, 118, :_reduce_73,
  0, 112, :_reduce_none,
  2, 112, :_reduce_75,
  3, 132, :_reduce_76,
  1, 132, :_reduce_none,
  1, 133, :_reduce_none,
  0, 119, :_reduce_none,
  2, 119, :_reduce_80,
  1, 134, :_reduce_none,
  6, 135, :_reduce_82,
  5, 135, :_reduce_83,
  4, 136, :_reduce_84,
  3, 136, :_reduce_85,
  1, 137, :_reduce_none,
  3, 137, :_reduce_87,
  3, 109, :_reduce_88,
  1, 109, :_reduce_none,
  4, 138, :_reduce_90,
  3, 138, :_reduce_91,
  4, 139, :_reduce_92,
  3, 139, :_reduce_93,
  2, 140, :_reduce_94,
  1, 120, :_reduce_95,
  3, 131, :_reduce_96,
  1, 131, :_reduce_none,
  1, 129, :_reduce_none,
  3, 129, :_reduce_99,
  1, 141, :_reduce_none,
  3, 141, :_reduce_101,
  3, 141, :_reduce_102,
  2, 142, :_reduce_103,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 143, :_reduce_none,
  1, 145, :_reduce_none,
  3, 145, :_reduce_108,
  1, 145, :_reduce_none,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  3, 148, :_reduce_116,
  3, 148, :_reduce_117,
  3, 148, :_reduce_118,
  3, 148, :_reduce_119,
  3, 148, :_reduce_120,
  3, 148, :_reduce_121,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  3, 151, :_reduce_126,
  5, 151, :_reduce_127,
  4, 151, :_reduce_128,
  6, 151, :_reduce_129,
  4, 155, :_reduce_130,
  1, 154, :_reduce_131,
  2, 154, :_reduce_132,
  4, 156, :_reduce_133,
  1, 152, :_reduce_134,
  2, 152, :_reduce_135,
  3, 108, :_reduce_136,
  3, 108, :_reduce_137,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_140,
  3, 153, :_reduce_141,
  3, 153, :_reduce_142,
  1, 153, :_reduce_none,
  2, 157, :_reduce_144,
  1, 157, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  3, 159, :_reduce_149,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 163, :_reduce_154,
  3, 96, :_reduce_155,
  1, 96, :_reduce_none,
  1, 116, :_reduce_none,
  4, 161, :_reduce_158,
  1, 161, :_reduce_none,
  4, 166, :_reduce_160,
  4, 166, :_reduce_161,
  4, 166, :_reduce_162,
  4, 166, :_reduce_163,
  4, 166, :_reduce_164,
  4, 166, :_reduce_165,
  3, 150, :_reduce_166,
  4, 150, :_reduce_167,
  4, 144, :_reduce_168,
  1, 167, :_reduce_none,
  3, 167, :_reduce_170,
  1, 164, :_reduce_171,
  1, 164, :_reduce_172,
  1, 158, :_reduce_173,
  1, 158, :_reduce_174,
  1, 105, :_reduce_175,
  3, 165, :_reduce_176,
  2, 165, :_reduce_177,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_180,
  1, 147, :_reduce_181,
  1, 147, :_reduce_182,
  1, 168, :_reduce_none,
  2, 169, :_reduce_184 ]

racc_reduce_n = 185

racc_shift_n = 334

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :FETCH => 4,
  :FIRST => 5,
  :unsigned_integer => 6,
  :ROWS => 7,
  :ONLY => 8,
  :OFFSET => 9,
  :NEXT => 10,
  :comma => 11,
  :built_in_function => 12,
  :ASC => 13,
  :DESC => 14,
  :left_paren => 15,
  :right_paren => 16,
  :INSERT => 17,
  :INTO => 18,
  :UPDATE => 19,
  :SET => 20,
  :DELETE => 21,
  :FROM => 22,
  :equals_operator => 23,
  :VALUES => 24,
  :SELECT => 25,
  :asterisk => 26,
  :DISTINCT => 27,
  :period => 28,
  :AS => 29,
  :CROSS => 30,
  :JOIN => 31,
  :INNER => 32,
  :LEFT => 33,
  :OUTER => 34,
  :RIGHT => 35,
  :FULL => 36,
  :ON => 37,
  :USING => 38,
  :WHERE => 39,
  :GROUP => 40,
  :LIMIT => 41,
  :HAVING => 42,
  :NOT => 43,
  :BETWEEN => 44,
  :AND => 45,
  :IN => 46,
  :LIKE => 47,
  :IS => 48,
  :NULL => 49,
  :EXISTS => 50,
  :identifier => 51,
  :OR => 52,
  :XOR => 53,
  :not_equals_operator => 54,
  :less_than_operator => 55,
  :greater_than_operator => 56,
  :less_than_or_equals_operator => 57,
  :greater_than_or_equals_operator => 58,
  :CASE => 59,
  :END => 60,
  :ELSE => 61,
  :WHEN => 62,
  :THEN => 63,
  :plus_sign => 64,
  :minus_sign => 65,
  :solidus => 66,
  :CURRENT_USER => 67,
  :COUNT => 68,
  :AVG => 69,
  :MAX => 70,
  :MIN => 71,
  :SUM => 72,
  :IFNULL => 73,
  :unsigned_float => 74,
  :quote => 75,
  :character_string_literal => 76,
  :variable => 77,
  :true_literal => 78,
  :false_literal => 79,
  :DATE => 80,
  :date_string => 81 }

racc_nt_base = 82

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "FETCH",
  "FIRST",
  "unsigned_integer",
  "ROWS",
  "ONLY",
  "OFFSET",
  "NEXT",
  "comma",
  "built_in_function",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "UPDATE",
  "SET",
  "DELETE",
  "FROM",
  "equals_operator",
  "VALUES",
  "SELECT",
  "asterisk",
  "DISTINCT",
  "period",
  "AS",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "LIMIT",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "XOR",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "CASE",
  "END",
  "ELSE",
  "WHEN",
  "THEN",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "IFNULL",
  "unsigned_float",
  "quote",
  "character_string_literal",
  "variable",
  "true_literal",
  "false_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "update_specification",
  "delete_specification",
  "query_expression",
  "order_by_clause",
  "fetch_only_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_reference",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "assign_list",
  "where_clause",
  "assign_column",
  "column_name",
  "row_value_constructor",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "distinct_select_list",
  "table_expression",
  "limit_clause",
  "select_list",
  "select_sublist",
  "derived_column",
  "qualifier",
  "from_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "row_subquery",
  "between_predicate",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_function",
  "boolean_primary",
  "predicate",
  "boolean_literal",
  "comparison_predicate",
  "row_value_constructor_element",
  "general_function",
  "case_expression",
  "when_expressions",
  "term",
  "when_value_expressions",
  "when_value_expression",
  "when_expression",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "general_literal",
  "general_set_function",
  "argument_list",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 15)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1], val[2])
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.racc', 20)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2])
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'parser.racc', 24)
  def _reduce_10(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(0, val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 25)
  def _reduce_11(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(val[1], val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 28)
  def _reduce_12(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.racc', 32)
  def _reduce_14(val, _values, result)
     result = val[1].new(val[0])
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::BuiltInFunction.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 37)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Ascending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Ascending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 42)
  def _reduce_20(val, _values, result)
     result = SQLParser::Statement::Descending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1])
    result
  end
.,.,

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_24(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_25(val, _values, result)
     result = SQLParser::Statement::Update.new(val[1], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::Delete.new(val[2], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_27(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_28(val, _values, result)
     result = Array(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::AssignColumn.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_31(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 32 omitted

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_33(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_34(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::All.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_37(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_38(val, _values, result)
     result = SQLParser::Statement::Distinct.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_39(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_40(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 41 omitted

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_42(val, _values, result)
     result = SQLParser::Statement::All.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 97)
  def _reduce_43(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 98)
  def _reduce_44(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1])
    result
  end
.,.,

# reduce 45 omitted

module_eval(<<'.,.,', 'parser.racc', 102)
  def _reduce_46(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_48(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_49(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1])
    result
  end
.,.,

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_57(val, _values, result)
     result = val[1].new(val[0], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_58(val, _values, result)
     result = SQLParser::Statement::InnerJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::LeftJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_61(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 132)
  def _reduce_62(val, _values, result)
     result = SQLParser::Statement::RightJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_63(val, _values, result)
     result = SQLParser::Statement::FullJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 134)
  def _reduce_64(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin
    result
  end
.,.,

# reduce 65 omitted

# reduce 66 omitted

module_eval(<<'.,.,', 'parser.racc', 141)
  def _reduce_67(val, _values, result)
     result = SQLParser::Statement::On.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 144)
  def _reduce_68(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2])
    result
  end
.,.,

# reduce 69 omitted

# reduce 70 omitted

module_eval(<<'.,.,', 'parser.racc', 151)
  def _reduce_71(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1])
    result
  end
.,.,

# reduce 72 omitted

module_eval(<<'.,.,', 'parser.racc', 155)
  def _reduce_73(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2])
    result
  end
.,.,

# reduce 74 omitted

module_eval(<<'.,.,', 'parser.racc', 159)
  def _reduce_75(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_76(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

module_eval(<<'.,.,', 'parser.racc', 170)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1])
    result
  end
.,.,

# reduce 81 omitted

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_82(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_83(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_84(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2])
    result
  end
.,.,

# reduce 86 omitted

module_eval(<<'.,.,', 'parser.racc', 186)
  def _reduce_87(val, _values, result)
     result = SQLParser::Statement::InValueList.new(Array(val[1]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 189)
  def _reduce_88(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 89 omitted

module_eval(<<'.,.,', 'parser.racc', 196)
  def _reduce_90(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_91(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 200)
  def _reduce_92(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 201)
  def _reduce_93(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 204)
  def _reduce_94(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 208)
  def _reduce_95(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 211)
  def _reduce_96(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 97 omitted

# reduce 98 omitted

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_99(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2])
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'parser.racc', 222)
  def _reduce_101(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 223)
  def _reduce_102(val, _values, result)
     result = SQLParser::Statement::Xor.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 226)
  def _reduce_103(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1])
    result
  end
.,.,

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

module_eval(<<'.,.,', 'parser.racc', 236)
  def _reduce_108(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_116(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 250)
  def _reduce_117(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 251)
  def _reduce_118(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 252)
  def _reduce_119(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 253)
  def _reduce_120(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 254)
  def _reduce_121(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2])
    result
  end
.,.,

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_126(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(nil,val[1], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 267)
  def _reduce_127(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(nil,val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 268)
  def _reduce_128(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(val[1], val[2], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 269)
  def _reduce_129(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(val[1], val[2], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_130(val, _values, result)
     result = SQLParser::Statement::WhenClause.new(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_131(val, _values, result)
     result = [ val[0] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_132(val, _values, result)
     result = [ *val[0], val[1] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 280)
  def _reduce_133(val, _values, result)
     result = SQLParser::Statement::WhenClause.new(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_134(val, _values, result)
     result = [ val[0] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_135(val, _values, result)
     result = [ *val[0], val[1] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 287)
  def _reduce_136(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2])
    result
  end
.,.,

# reduce 138 omitted

# reduce 139 omitted

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_140(val, _values, result)
     result = SQLParser::Statement::Null.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 294)
  def _reduce_141(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_142(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2])
    result
  end
.,.,

# reduce 143 omitted

module_eval(<<'.,.,', 'parser.racc', 299)
  def _reduce_144(val, _values, result)
     result = val[0].new(val[1])
    result
  end
.,.,

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_149(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

module_eval(<<'.,.,', 'parser.racc', 317)
  def _reduce_154(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_155(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2])
    result
  end
.,.,

# reduce 156 omitted

# reduce 157 omitted

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_158(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new)
    result
  end
.,.,

# reduce 159 omitted

module_eval(<<'.,.,', 'parser.racc', 331)
  def _reduce_160(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_161(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 333)
  def _reduce_162(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 334)
  def _reduce_163(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 335)
  def _reduce_164(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 336)
  def _reduce_165(val, _values, result)
     result = SQLParser::Statement::FunctionCall.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 340)
  def _reduce_166(val, _values, result)
     result = SQLParser::Statement::FunctionCall.new(val[0], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 341)
  def _reduce_167(val, _values, result)
     result = SQLParser::Statement::FunctionCall.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 344)
  def _reduce_168(val, _values, result)
     result = SQLParser::Statement::BooleanFunction.new(val[0], val[2])
    result
  end
.,.,

# reduce 169 omitted

module_eval(<<'.,.,', 'parser.racc', 348)
  def _reduce_170(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 352)
  def _reduce_171(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 353)
  def _reduce_172(val, _values, result)
    result = SQLParser::Statement::Float.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 356)
  def _reduce_173(val, _values, result)
     result = SQLParser::Statement::UnaryPlus
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 357)
  def _reduce_174(val, _values, result)
     result = SQLParser::Statement::UnaryMinus
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 361)
  def _reduce_175(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 365)
  def _reduce_176(val, _values, result)
     result = SQLParser::Statement::String.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 366)
  def _reduce_177(val, _values, result)
     result = SQLParser::Statement::String.new('')
    result
  end
.,.,

# reduce 178 omitted

# reduce 179 omitted

module_eval(<<'.,.,', 'parser.racc', 369)
  def _reduce_180(val, _values, result)
     result = SQLParser::Statement::Variable.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 372)
  def _reduce_181(val, _values, result)
     result = SQLParser::Statement::True.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 373)
  def _reduce_182(val, _values, result)
     result = SQLParser::Statement::False.new
    result
  end
.,.,

# reduce 183 omitted

module_eval(<<'.,.,', 'parser.racc', 379)
  def _reduce_184(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module SQLParser
