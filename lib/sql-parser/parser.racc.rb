#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.0
# from Racc grammar file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 382)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    58,   123,   123,   267,   222,   103,   143,   122,   122,    43,
    84,     9,   231,    10,    13,    11,   289,    72,    94,    12,
    25,    27,    73,   217,   218,   -93,   219,   220,   221,   -93,
    86,    86,    58,   223,   224,   225,   226,   227,   233,    86,
   233,    43,    36,   104,    32,    32,    32,   276,   101,   102,
   234,    33,    25,   277,   114,   113,    60,    61,    15,    48,
    51,    53,    54,    55,    56,    57,    59,    62,    58,    65,
    66,    67,    69,    16,    36,    22,    32,    43,   268,    23,
   269,   270,    70,    33,   195,   196,    77,    74,    60,    61,
    22,    48,    51,    53,    54,    55,    56,    57,    59,    62,
    58,    65,    66,    67,    69,    78,    22,    80,    81,    43,
    82,    83,    32,    90,   139,   146,   147,    98,   210,   211,
   150,    92,    98,    93,    60,    61,   -93,    48,    51,    53,
    54,    55,    56,    57,    59,    62,    58,    65,    66,    67,
    69,   107,   108,   109,    32,    43,   110,   111,   112,   115,
   116,   117,    86,    22,   132,   133,   134,   135,   136,    48,
    51,    53,    54,    55,    56,    57,    59,    62,    58,    65,
    66,    67,    69,    86,   139,    22,    86,    43,    36,   150,
    32,   176,   181,   190,   191,   192,   193,    33,   127,   200,
   139,   202,    60,    61,   203,    48,    51,    53,    54,    55,
    56,    57,    59,    62,    22,    65,    66,    67,    69,    58,
    36,    22,    32,   208,   228,   232,    86,   237,   152,    33,
   238,   239,   240,   241,    60,    61,   242,    48,    51,    53,
    54,    55,    56,    57,    59,    62,   243,    65,    66,    67,
    69,    58,   244,   245,   246,   160,   248,   249,    86,   233,
    43,    36,   155,   156,   261,   262,   263,   265,   266,   181,
    33,   272,    12,   291,   292,    60,    61,   294,    48,    51,
    53,    54,    55,    56,    57,    59,    62,    58,    65,    66,
    67,    69,   295,    36,   297,    32,    43,    32,   302,   272,
   307,   309,    33,   310,   232,   312,   233,    60,    61,    86,
    48,    51,    53,    54,    55,    56,    57,    59,    62,    58,
    65,    66,    67,    69,   233,   317,   318,   320,    43,    36,
   321,    32,   322,   323,   324,    32,   327,    86,    33,   nil,
   nil,   nil,   nil,    60,    61,   nil,    48,    51,    53,    54,
    55,    56,    57,    59,    62,    58,    65,    66,    67,    69,
   nil,   nil,   nil,    32,    43,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    77,   nil,    60,    61,   nil,    48,    51,
    53,    54,    55,    56,    57,    59,    62,    58,    65,    66,
    67,    69,    78,   nil,    80,    81,    43,    82,    83,    32,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   182,   nil,   nil,
   nil,    60,    61,   nil,    48,    51,    53,    54,    55,    56,
    57,    59,    62,    58,    65,    66,    67,    69,   nil,    36,
   nil,    32,    43,   nil,   nil,   nil,   nil,   nil,    33,   nil,
   nil,   nil,   nil,    60,    61,   nil,    48,    51,    53,    54,
    55,    56,    57,    59,    62,    58,    65,    66,    67,    69,
   nil,   nil,   nil,   nil,    43,    36,   nil,    32,   nil,   nil,
   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    60,
    61,   nil,    48,    51,    53,    54,    55,    56,    57,    59,
    62,    58,    65,    66,    67,    69,   nil,    36,   nil,    32,
    43,   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,
   nil,    60,    61,   nil,    48,    51,    53,    54,    55,    56,
    57,    59,    62,    58,    65,    66,    67,    69,   nil,   nil,
   nil,   nil,    43,    36,   nil,    32,   nil,   nil,   nil,   nil,
   nil,   nil,    33,   nil,   nil,   nil,   nil,    60,    61,   nil,
    48,    51,    53,    54,    55,    56,    57,    59,    62,    58,
    65,    66,    67,    69,   nil,    36,   nil,    32,    43,   nil,
   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    60,
    61,   nil,    48,    51,    53,    54,    55,    56,    57,    59,
    62,    58,    65,    66,    67,    69,   nil,   nil,   nil,   nil,
    43,    36,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,
    33,   nil,   nil,   nil,   nil,    60,    61,   nil,    48,    51,
    53,    54,    55,    56,    57,    59,    62,   nil,    65,    66,
    67,    69,    58,    36,   nil,    32,   nil,   nil,   nil,   nil,
   nil,   152,    33,   nil,   nil,   nil,   nil,    60,    61,   nil,
    48,    51,    53,    54,    55,    56,    57,    59,    62,   nil,
    65,    66,    67,    69,    58,   nil,   nil,   nil,   160,   nil,
   nil,   nil,   nil,    43,    36,   155,   156,   nil,   nil,   nil,
   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    60,    61,
   nil,    48,    51,    53,    54,    55,    56,    57,    59,    62,
    58,    65,    66,    67,    69,   nil,    36,   nil,    32,    43,
   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,
    60,    61,   nil,    48,    51,    53,    54,    55,    56,    57,
    59,    62,   nil,    65,    66,    67,    69,   nil,   nil,    58,
   nil,   nil,    36,   nil,    32,   nil,   nil,   nil,   152,   nil,
   nil,    33,   nil,   nil,   nil,   nil,    60,    61,    12,    48,
    51,    53,    54,    55,    56,    57,    59,    62,   nil,    65,
    66,    67,    69,   nil,   nil,   160,    58,   nil,   nil,   nil,
   nil,    36,   155,   156,   nil,   152,   nil,   nil,   nil,   nil,
    33,   nil,   nil,   nil,   nil,    60,    61,   nil,    48,    51,
    53,    54,    55,    56,    57,    59,    62,    58,    65,    66,
    67,    69,   nil,   nil,   nil,   nil,    43,   nil,    36,   155,
   235,   nil,   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,
   nil,   nil,    60,    61,   nil,    48,    51,    53,    54,    55,
    56,    57,    59,    62,    58,    65,    66,    67,    69,    36,
   nil,    32,   nil,   253,   nil,   nil,   nil,   nil,    33,   nil,
   nil,   nil,   nil,    60,    61,   nil,    48,    51,    53,    54,
    55,    56,    57,    59,    62,    58,    65,    66,    67,    69,
   nil,   nil,   nil,   nil,    43,   nil,    36,   nil,   235,   nil,
   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,
    60,    61,   nil,    48,    51,    53,    54,    55,    56,    57,
    59,    62,    58,    65,    66,    67,    69,    36,   nil,    32,
   nil,   253,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,
   nil,    60,    61,   nil,    48,    51,    53,    54,    55,    56,
    57,    59,    62,    58,    65,    66,    67,    69,   nil,   nil,
   nil,   nil,   253,   nil,    36,   nil,   235,   nil,   nil,   nil,
   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    60,    61,
   nil,    48,    51,    53,    54,    55,    56,    57,    59,    62,
    58,    65,    66,    67,    69,    36,   nil,   235,   nil,   253,
   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    60,
    61,   nil,    48,    51,    53,    54,    55,    56,    57,    59,
    62,    58,    65,    66,    67,    69,   nil,   nil,   nil,   nil,
   253,   nil,    36,   nil,   235,   nil,   nil,   nil,   nil,   nil,
   nil,    33,   nil,   nil,   nil,   nil,    60,    61,   nil,    48,
    51,    53,    54,    55,    56,    57,    59,    62,    58,    65,
    66,    67,    69,    36,   nil,   235,   nil,   253,   nil,   nil,
   nil,   nil,    33,   nil,   nil,   nil,   nil,    60,    61,   nil,
    48,    51,    53,    54,    55,    56,    57,    59,    62,    58,
    65,    66,    67,    69,   nil,   nil,   nil,   nil,   253,   nil,
    36,   nil,   235,   nil,   nil,   nil,   nil,   nil,   nil,    33,
   nil,   nil,   nil,   nil,    60,    61,   nil,    48,    51,    53,
    54,    55,    56,    57,    59,    62,    58,    65,    66,    67,
    69,    36,   nil,   235,   nil,   253,   nil,   nil,   nil,   nil,
    33,   nil,   nil,   nil,   nil,    60,    61,   nil,    48,    51,
    53,    54,    55,    56,    57,    59,    62,    58,    65,    66,
    67,    69,   nil,   nil,   nil,   nil,   253,   nil,    36,   nil,
   235,   nil,   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,
   nil,   nil,    60,    61,   nil,    48,    51,    53,    54,    55,
    56,    57,    59,    62,    58,    65,    66,    67,    69,    36,
   nil,   235,   nil,    43,   284,   nil,   nil,   nil,    33,   nil,
   nil,   nil,   nil,    60,    61,   nil,    48,    51,    53,    54,
    55,    56,    57,    59,    62,   nil,    65,    66,    67,    69,
   nil,    58,   nil,   nil,   nil,   nil,    36,   nil,    32,   nil,
   152,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,
    60,    61,   nil,    48,    51,    53,    54,    55,    56,    57,
    59,    62,   nil,    65,    66,    67,    69,   160,    58,   nil,
   nil,   nil,   nil,    36,   155,   156,   nil,   152,   nil,   nil,
   nil,   nil,    33,   nil,   nil,   nil,   nil,    60,    61,   nil,
    48,    51,    53,    54,    55,    56,    57,    59,    62,    58,
    65,    66,    67,    69,   160,   nil,   nil,   nil,    43,   nil,
    36,   155,   156,   nil,   nil,   nil,   nil,   nil,   nil,    33,
   nil,   nil,   nil,   nil,    60,    61,   nil,    48,    51,    53,
    54,    55,    56,    57,    59,    62,    58,    65,    66,    67,
    69,    36,   nil,    32,   nil,    43,   nil,   nil,   nil,   nil,
    33,   nil,   nil,   nil,   nil,    60,    61,   nil,    48,    51,
    53,    54,    55,    56,    57,    59,    62,    58,    65,    66,
    67,    69,   nil,   nil,   nil,   nil,    43,   nil,    36,   nil,
    32,   nil,   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,
   nil,   nil,    60,    61,   nil,    48,    51,    53,    54,    55,
    56,    57,    59,    62,   nil,    65,    66,    67,    69,    36,
   nil,    32,   nil,   nil,   nil,   nil,    58,   nil,    33,   nil,
   nil,  -164,   nil,    60,    61,    43,    48,    51,    53,    54,
    55,    56,    57,    59,    62,    12,    65,    66,    67,    69,
  -164,  -164,   nil,  -164,  -164,  -164,   nil,   nil,    58,   nil,
  -164,  -164,  -164,  -164,  -164,   nil,   nil,   152,    36,   nil,
    32,   nil,   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,
   nil,   nil,    60,    61,   nil,    48,    51,    53,    54,    55,
    56,    57,    59,    62,   160,    65,    66,    67,    69,    58,
    36,   155,   156,   nil,   nil,   nil,   nil,   nil,   152,    33,
   nil,   nil,   nil,   nil,    60,    61,   nil,    48,    51,    53,
    54,    55,    56,    57,    59,    62,   nil,    65,    66,    67,
    69,    58,   nil,   nil,   nil,   160,   nil,   nil,   nil,   nil,
    43,    36,   155,   156,   nil,   nil,   nil,   nil,   nil,   nil,
    33,   nil,   nil,   nil,   nil,    60,    61,   nil,    48,    51,
    53,    54,    55,    56,    57,    59,    62,    58,    65,    66,
    67,    69,   nil,    36,   nil,    32,   253,   nil,   nil,   nil,
   nil,   nil,    33,   nil,   nil,   nil,   nil,    60,    61,   nil,
    48,    51,    53,    54,    55,    56,    57,    59,    62,    58,
    65,    66,    67,    69,   nil,   nil,   nil,   nil,   253,    36,
   nil,   235,   nil,   nil,   nil,   nil,   nil,   nil,    33,   nil,
   nil,   nil,   nil,    60,    61,   nil,    48,    51,    53,    54,
    55,    56,    57,    59,    62,    58,    65,    66,    67,    69,
   nil,    36,   nil,   235,    43,   nil,   nil,   nil,   nil,   nil,
    33,   nil,   nil,   nil,    12,    60,    61,   nil,    48,    51,
    53,    54,    55,    56,    57,    59,    62,   nil,    65,    66,
    67,    69,    58,   nil,   nil,   nil,   nil,    36,   nil,    32,
   nil,    43,   284,   nil,   nil,   nil,    33,   nil,   nil,   nil,
   nil,    60,    61,   nil,    48,    51,    53,    54,    55,    56,
    57,    59,    62,    58,    65,    66,    67,    69,   nil,   nil,
   nil,   nil,    43,   nil,    36,   nil,    32,   nil,   nil,   nil,
   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    60,    61,
   nil,    48,    51,    53,    54,    55,    56,    57,    59,    62,
    58,    65,    66,    67,    69,    36,   nil,    32,   nil,   253,
   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,    60,
    61,   nil,    48,    51,    53,    54,    55,    56,    57,    59,
    62,    58,    65,    66,    67,    69,   nil,   nil,   nil,   nil,
   253,   nil,    36,   nil,   235,   nil,   nil,   nil,   nil,   nil,
   nil,    33,   nil,   nil,   nil,   nil,    60,    61,   nil,    48,
    51,    53,    54,    55,    56,    57,    59,    62,   nil,    65,
    66,    67,    69,    36,   nil,   235,   nil,   nil,   nil,   nil,
   nil,   nil,    33,   nil,   nil,   nil,  -176,    60,    61,  -176,
    48,    51,    53,    54,    55,    56,    57,    59,    62,   nil,
    65,    66,    67,    69,   nil,  -176,  -176,   nil,  -176,  -176,
  -176,    77,   nil,   nil,   nil,  -176,  -176,  -176,  -176,  -176,
    77,   nil,   nil,   nil,   nil,  -176,  -176,  -176,   nil,    76,
    78,   nil,    80,    81,   nil,    82,    83,   258,   259,    78,
   nil,    80,    81,    77,    82,    83,   nil,   126,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   127,   nil,   nil,   nil,
   nil,   nil,    78,   nil,    80,    81,   nil,    82,    83 ]

racc_action_check = [
    12,    74,   193,   215,   154,    37,    93,    74,   193,    12,
    18,     0,   156,     0,     1,     0,   235,    14,    31,     0,
    12,    12,    14,   154,   154,   156,   154,   154,   154,   235,
    93,    18,    27,   154,   154,   154,   154,   154,   215,    31,
   158,    27,    12,    37,    12,    74,   193,   221,    34,    34,
   158,    12,    27,   221,    62,    62,    12,    12,     7,    12,
    12,    12,    12,    12,    12,    12,    12,    12,    33,    12,
    12,    12,    12,     9,    27,    10,    27,    33,   217,    11,
   217,   217,    13,    27,   120,   120,    87,    15,    27,    27,
    16,    27,    27,    27,    27,    27,    27,    27,    27,    27,
    38,    27,    27,    27,    27,    87,    23,    87,    87,    38,
    87,    87,    33,    24,    87,    96,    96,    96,   149,   149,
   149,    29,    33,    30,    33,    33,    32,    33,    33,    33,
    33,    33,    33,    33,    33,    33,    43,    33,    33,    33,
    33,    51,    53,    54,    38,    43,    55,    56,    57,    69,
    72,    73,    76,    77,    78,    79,    81,    82,    83,    38,
    38,    38,    38,    38,    38,    38,    38,    38,    92,    38,
    38,    38,    38,    84,    89,    90,    94,    92,    43,    97,
    43,   100,   106,   113,   116,   117,   118,    43,   125,   127,
   128,   129,    43,    43,   130,    43,    43,    43,    43,    43,
    43,    43,    43,    43,   132,    43,    43,    43,    43,    98,
    92,   133,    92,   140,   155,   157,   176,   182,    98,    92,
   183,   184,   185,   186,    92,    92,   187,    92,    92,    92,
    92,    92,    92,    92,    92,    92,   188,    92,    92,    92,
    92,   101,   189,   191,   192,    98,   198,   199,   202,   206,
   101,    98,    98,    98,   207,   208,   209,   213,   214,   216,
    98,   219,   228,   245,   246,    98,    98,   250,    98,    98,
    98,    98,    98,    98,    98,    98,    98,   102,    98,    98,
    98,    98,   251,   101,   259,   101,   102,   262,   264,   269,
   271,   276,   101,   285,   287,   292,   296,   101,   101,   297,
   101,   101,   101,   101,   101,   101,   101,   101,   101,   103,
   101,   101,   101,   101,   298,   299,   304,   308,   103,   102,
   311,   102,   312,   314,   315,   317,   322,   324,   102,   nil,
   nil,   nil,   nil,   102,   102,   nil,   102,   102,   102,   102,
   102,   102,   102,   102,   102,   104,   102,   102,   102,   102,
   nil,   nil,   nil,   103,   104,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   141,   nil,   103,   103,   nil,   103,   103,
   103,   103,   103,   103,   103,   103,   103,   107,   103,   103,
   103,   103,   141,   nil,   141,   141,   107,   141,   141,   104,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   107,   nil,   nil,
   nil,   104,   104,   nil,   104,   104,   104,   104,   104,   104,
   104,   104,   104,   108,   104,   104,   104,   104,   nil,   107,
   nil,   107,   108,   nil,   nil,   nil,   nil,   nil,   107,   nil,
   nil,   nil,   nil,   107,   107,   nil,   107,   107,   107,   107,
   107,   107,   107,   107,   107,   109,   107,   107,   107,   107,
   nil,   nil,   nil,   nil,   109,   108,   nil,   108,   nil,   nil,
   nil,   nil,   nil,   nil,   108,   nil,   nil,   nil,   nil,   108,
   108,   nil,   108,   108,   108,   108,   108,   108,   108,   108,
   108,   110,   108,   108,   108,   108,   nil,   109,   nil,   109,
   110,   nil,   nil,   nil,   nil,   nil,   109,   nil,   nil,   nil,
   nil,   109,   109,   nil,   109,   109,   109,   109,   109,   109,
   109,   109,   109,   111,   109,   109,   109,   109,   nil,   nil,
   nil,   nil,   111,   110,   nil,   110,   nil,   nil,   nil,   nil,
   nil,   nil,   110,   nil,   nil,   nil,   nil,   110,   110,   nil,
   110,   110,   110,   110,   110,   110,   110,   110,   110,   112,
   110,   110,   110,   110,   nil,   111,   nil,   111,   112,   nil,
   nil,   nil,   nil,   nil,   111,   nil,   nil,   nil,   nil,   111,
   111,   nil,   111,   111,   111,   111,   111,   111,   111,   111,
   111,   126,   111,   111,   111,   111,   nil,   nil,   nil,   nil,
   126,   112,   nil,   112,   nil,   nil,   nil,   nil,   nil,   nil,
   112,   nil,   nil,   nil,   nil,   112,   112,   nil,   112,   112,
   112,   112,   112,   112,   112,   112,   112,   nil,   112,   112,
   112,   112,   139,   126,   nil,   126,   nil,   nil,   nil,   nil,
   nil,   139,   126,   nil,   nil,   nil,   nil,   126,   126,   nil,
   126,   126,   126,   126,   126,   126,   126,   126,   126,   nil,
   126,   126,   126,   126,   147,   nil,   nil,   nil,   139,   nil,
   nil,   nil,   nil,   147,   139,   139,   139,   nil,   nil,   nil,
   nil,   nil,   nil,   139,   nil,   nil,   nil,   nil,   139,   139,
   nil,   139,   139,   139,   139,   139,   139,   139,   139,   139,
   150,   139,   139,   139,   139,   nil,   147,   nil,   147,   150,
   nil,   nil,   nil,   nil,   nil,   147,   nil,   nil,   nil,   nil,
   147,   147,   nil,   147,   147,   147,   147,   147,   147,   147,
   147,   147,   nil,   147,   147,   147,   147,   nil,   nil,   152,
   nil,   nil,   150,   nil,   150,   nil,   nil,   nil,   152,   nil,
   nil,   150,   nil,   nil,   nil,   nil,   150,   150,   152,   150,
   150,   150,   150,   150,   150,   150,   150,   150,   nil,   150,
   150,   150,   150,   nil,   nil,   152,   160,   nil,   nil,   nil,
   nil,   152,   152,   152,   nil,   160,   nil,   nil,   nil,   nil,
   152,   nil,   nil,   nil,   nil,   152,   152,   nil,   152,   152,
   152,   152,   152,   152,   152,   152,   152,   200,   152,   152,
   152,   152,   nil,   nil,   nil,   nil,   200,   nil,   160,   160,
   160,   nil,   nil,   nil,   nil,   nil,   nil,   160,   nil,   nil,
   nil,   nil,   160,   160,   nil,   160,   160,   160,   160,   160,
   160,   160,   160,   160,   203,   160,   160,   160,   160,   200,
   nil,   200,   nil,   203,   nil,   nil,   nil,   nil,   200,   nil,
   nil,   nil,   nil,   200,   200,   nil,   200,   200,   200,   200,
   200,   200,   200,   200,   200,   211,   200,   200,   200,   200,
   nil,   nil,   nil,   nil,   211,   nil,   203,   nil,   203,   nil,
   nil,   nil,   nil,   nil,   nil,   203,   nil,   nil,   nil,   nil,
   203,   203,   nil,   203,   203,   203,   203,   203,   203,   203,
   203,   203,   218,   203,   203,   203,   203,   211,   nil,   211,
   nil,   218,   nil,   nil,   nil,   nil,   211,   nil,   nil,   nil,
   nil,   211,   211,   nil,   211,   211,   211,   211,   211,   211,
   211,   211,   211,   220,   211,   211,   211,   211,   nil,   nil,
   nil,   nil,   220,   nil,   218,   nil,   218,   nil,   nil,   nil,
   nil,   nil,   nil,   218,   nil,   nil,   nil,   nil,   218,   218,
   nil,   218,   218,   218,   218,   218,   218,   218,   218,   218,
   222,   218,   218,   218,   218,   220,   nil,   220,   nil,   222,
   nil,   nil,   nil,   nil,   220,   nil,   nil,   nil,   nil,   220,
   220,   nil,   220,   220,   220,   220,   220,   220,   220,   220,
   220,   223,   220,   220,   220,   220,   nil,   nil,   nil,   nil,
   223,   nil,   222,   nil,   222,   nil,   nil,   nil,   nil,   nil,
   nil,   222,   nil,   nil,   nil,   nil,   222,   222,   nil,   222,
   222,   222,   222,   222,   222,   222,   222,   222,   224,   222,
   222,   222,   222,   223,   nil,   223,   nil,   224,   nil,   nil,
   nil,   nil,   223,   nil,   nil,   nil,   nil,   223,   223,   nil,
   223,   223,   223,   223,   223,   223,   223,   223,   223,   225,
   223,   223,   223,   223,   nil,   nil,   nil,   nil,   225,   nil,
   224,   nil,   224,   nil,   nil,   nil,   nil,   nil,   nil,   224,
   nil,   nil,   nil,   nil,   224,   224,   nil,   224,   224,   224,
   224,   224,   224,   224,   224,   224,   226,   224,   224,   224,
   224,   225,   nil,   225,   nil,   226,   nil,   nil,   nil,   nil,
   225,   nil,   nil,   nil,   nil,   225,   225,   nil,   225,   225,
   225,   225,   225,   225,   225,   225,   225,   227,   225,   225,
   225,   225,   nil,   nil,   nil,   nil,   227,   nil,   226,   nil,
   226,   nil,   nil,   nil,   nil,   nil,   nil,   226,   nil,   nil,
   nil,   nil,   226,   226,   nil,   226,   226,   226,   226,   226,
   226,   226,   226,   226,   231,   226,   226,   226,   226,   227,
   nil,   227,   nil,   231,   231,   nil,   nil,   nil,   227,   nil,
   nil,   nil,   nil,   227,   227,   nil,   227,   227,   227,   227,
   227,   227,   227,   227,   227,   nil,   227,   227,   227,   227,
   nil,   232,   nil,   nil,   nil,   nil,   231,   nil,   231,   nil,
   232,   nil,   nil,   nil,   nil,   231,   nil,   nil,   nil,   nil,
   231,   231,   nil,   231,   231,   231,   231,   231,   231,   231,
   231,   231,   nil,   231,   231,   231,   231,   232,   233,   nil,
   nil,   nil,   nil,   232,   232,   232,   nil,   233,   nil,   nil,
   nil,   nil,   232,   nil,   nil,   nil,   nil,   232,   232,   nil,
   232,   232,   232,   232,   232,   232,   232,   232,   232,   234,
   232,   232,   232,   232,   233,   nil,   nil,   nil,   234,   nil,
   233,   233,   233,   nil,   nil,   nil,   nil,   nil,   nil,   233,
   nil,   nil,   nil,   nil,   233,   233,   nil,   233,   233,   233,
   233,   233,   233,   233,   233,   233,   244,   233,   233,   233,
   233,   234,   nil,   234,   nil,   244,   nil,   nil,   nil,   nil,
   234,   nil,   nil,   nil,   nil,   234,   234,   nil,   234,   234,
   234,   234,   234,   234,   234,   234,   234,   249,   234,   234,
   234,   234,   nil,   nil,   nil,   nil,   249,   nil,   244,   nil,
   244,   nil,   nil,   nil,   nil,   nil,   nil,   244,   nil,   nil,
   nil,   nil,   244,   244,   nil,   244,   244,   244,   244,   244,
   244,   244,   244,   244,   nil,   244,   244,   244,   244,   249,
   nil,   249,   nil,   nil,   nil,   nil,   253,   nil,   249,   nil,
   nil,   310,   nil,   249,   249,   253,   249,   249,   249,   249,
   249,   249,   249,   249,   249,   253,   249,   249,   249,   249,
   310,   310,   nil,   310,   310,   310,   nil,   nil,   258,   nil,
   310,   310,   310,   310,   310,   nil,   nil,   258,   253,   nil,
   253,   nil,   nil,   nil,   nil,   nil,   nil,   253,   nil,   nil,
   nil,   nil,   253,   253,   nil,   253,   253,   253,   253,   253,
   253,   253,   253,   253,   258,   253,   253,   253,   253,   261,
   258,   258,   258,   nil,   nil,   nil,   nil,   nil,   261,   258,
   nil,   nil,   nil,   nil,   258,   258,   nil,   258,   258,   258,
   258,   258,   258,   258,   258,   258,   nil,   258,   258,   258,
   258,   265,   nil,   nil,   nil,   261,   nil,   nil,   nil,   nil,
   265,   261,   261,   261,   nil,   nil,   nil,   nil,   nil,   nil,
   261,   nil,   nil,   nil,   nil,   261,   261,   nil,   261,   261,
   261,   261,   261,   261,   261,   261,   261,   268,   261,   261,
   261,   261,   nil,   265,   nil,   265,   268,   nil,   nil,   nil,
   nil,   nil,   265,   nil,   nil,   nil,   nil,   265,   265,   nil,
   265,   265,   265,   265,   265,   265,   265,   265,   265,   270,
   265,   265,   265,   265,   nil,   nil,   nil,   nil,   270,   268,
   nil,   268,   nil,   nil,   nil,   nil,   nil,   nil,   268,   nil,
   nil,   nil,   nil,   268,   268,   nil,   268,   268,   268,   268,
   268,   268,   268,   268,   268,   272,   268,   268,   268,   268,
   nil,   270,   nil,   270,   272,   nil,   nil,   nil,   nil,   nil,
   270,   nil,   nil,   nil,   272,   270,   270,   nil,   270,   270,
   270,   270,   270,   270,   270,   270,   270,   nil,   270,   270,
   270,   270,   289,   nil,   nil,   nil,   nil,   272,   nil,   272,
   nil,   289,   289,   nil,   nil,   nil,   272,   nil,   nil,   nil,
   nil,   272,   272,   nil,   272,   272,   272,   272,   272,   272,
   272,   272,   272,   295,   272,   272,   272,   272,   nil,   nil,
   nil,   nil,   295,   nil,   289,   nil,   289,   nil,   nil,   nil,
   nil,   nil,   nil,   289,   nil,   nil,   nil,   nil,   289,   289,
   nil,   289,   289,   289,   289,   289,   289,   289,   289,   289,
   307,   289,   289,   289,   289,   295,   nil,   295,   nil,   307,
   nil,   nil,   nil,   nil,   295,   nil,   nil,   nil,   nil,   295,
   295,   nil,   295,   295,   295,   295,   295,   295,   295,   295,
   295,   318,   295,   295,   295,   295,   nil,   nil,   nil,   nil,
   318,   nil,   307,   nil,   307,   nil,   nil,   nil,   nil,   nil,
   nil,   307,   nil,   nil,   nil,   nil,   307,   307,   nil,   307,
   307,   307,   307,   307,   307,   307,   307,   307,   nil,   307,
   307,   307,   307,   318,   nil,   318,   nil,   nil,   nil,   nil,
   nil,   nil,   318,   nil,   nil,   nil,   165,   318,   318,   165,
   318,   318,   318,   318,   318,   318,   318,   318,   318,   nil,
   318,   318,   318,   318,   nil,   165,   165,   nil,   165,   165,
   165,   205,   nil,   nil,   nil,   165,   165,   165,   165,   165,
    17,   nil,   nil,   nil,   nil,   165,   165,   165,   nil,    17,
   205,   nil,   205,   205,   nil,   205,   205,   205,   205,    17,
   nil,    17,    17,    75,    17,    17,   nil,    75,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    75,   nil,   nil,   nil,
   nil,   nil,    75,   nil,    75,    75,   nil,    75,    75 ]

racc_action_pointer = [
    -6,    14,   nil,   nil,   nil,   nil,   nil,    56,   nil,    55,
    25,    57,    -6,    82,    13,    84,    40,  1819,   -19,   nil,
   nil,   nil,   nil,    56,    91,   nil,   nil,    26,   nil,   110,
    95,   -11,    98,    62,   -14,   nil,   nil,   -21,    94,   nil,
   nil,   nil,   nil,   130,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   126,   nil,   127,   128,   131,   132,   133,   nil,   nil,
   nil,   nil,   -19,   nil,   nil,   nil,   nil,   nil,   nil,    70,
   nil,   nil,   145,   145,    -5,  1842,   102,   103,   123,   124,
   nil,   122,   123,   124,   123,   nil,   nil,    75,   nil,   135,
   125,   nil,   162,   -20,   126,   nil,    57,   119,   203,   nil,
   153,   235,   271,   303,   339,   nil,   166,   371,   407,   439,
   475,   507,   543,   110,   nil,   nil,   178,   178,   175,   nil,
    71,   nil,   nil,   nil,   nil,   164,   575,   174,   151,   180,
   171,   nil,   154,   161,   nil,   nil,   nil,   nil,   nil,   616,
   173,   352,   nil,   nil,   nil,   nil,   nil,   648,   nil,    60,
   684,   nil,   723,   nil,   -19,   199,    -3,   171,   -11,   nil,
   760,   nil,   nil,   nil,   nil,  1773,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   166,   nil,   nil,   nil,
   nil,   nil,   201,   204,   205,   206,   207,   210,   220,   231,
   nil,   236,   240,    -4,   nil,   nil,   nil,   nil,   230,   236,
   791,   nil,   198,   828,   nil,  1810,   198,   213,   252,   198,
   nil,   859,   nil,   196,   242,   -13,   243,    35,   896,   246,
   927,     5,   964,   995,  1032,  1063,  1100,  1131,   237,   nil,
   nil,  1168,  1205,  1242,  1273,     1,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  1310,   255,   254,   nil,   nil,  1341,
   251,   271,   nil,  1390,   nil,   nil,   nil,   nil,  1422,   269,
   nil,  1463,   237,   nil,   230,  1495,   nil,   nil,  1531,   274,
  1563,   246,  1599,   nil,   nil,   nil,   243,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   277,   nil,   250,   nil,  1636,
   nil,   nil,   289,   nil,   nil,  1667,   245,   249,   263,   304,
   nil,   nil,   nil,   nil,   272,   nil,   nil,  1704,   301,   nil,
  1378,   304,   315,   nil,   307,   313,   nil,   275,  1735,   nil,
   nil,   nil,   318,   nil,   277,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -182,  -182,    -1,    -2,    -3,    -4,    -5,    -7,   -22,  -182,
  -182,  -182,  -182,  -182,    -9,  -182,  -182,  -182,   -50,   -51,
   -53,   -54,   -93,  -182,   -35,   -36,   -37,  -182,   -39,   -41,
  -182,   -45,  -172,  -182,  -135,  -136,  -137,  -140,  -182,  -142,
  -143,  -144,  -145,  -182,  -147,  -148,  -149,  -150,  -151,  -153,
  -154,  -182,  -156,  -182,  -182,  -182,  -182,  -182,  -168,  -169,
  -170,  -171,  -182,  -175,  -176,  -177,  -178,  -179,  -180,  -182,
   329,    -6,  -182,  -182,  -182,  -182,  -182,  -182,  -182,  -182,
   -58,   -60,   -62,   -63,  -182,   -49,  -172,   -70,   -34,   -70,
  -182,   -38,  -182,  -182,  -182,   -44,  -182,  -182,  -182,  -131,
  -182,  -182,  -182,  -182,  -182,  -141,  -182,  -182,  -182,  -182,
  -182,  -182,  -182,  -182,  -174,  -181,  -182,  -182,    -8,   -13,
   -18,   -15,   -16,   -17,   -23,  -182,  -182,  -182,   -70,   -28,
  -182,   -55,  -182,  -182,   -59,   -61,   -64,   -48,   -26,  -182,
   -72,   -47,   -40,   -42,  -152,   -43,  -123,  -182,  -132,  -182,
  -182,  -128,  -182,   -79,  -182,  -182,  -172,   -96,  -182,   -98,
  -182,  -101,  -102,  -103,  -104,  -106,  -107,  -108,  -109,  -110,
  -111,  -112,  -119,  -120,  -121,  -122,  -182,  -133,  -134,  -138,
  -139,  -146,  -182,  -182,  -182,  -182,  -182,  -182,  -182,  -166,
  -173,  -182,  -182,  -182,   -14,   -19,   -20,   -24,  -182,   -32,
  -182,   -25,  -182,  -182,   -56,  -182,   -71,   -77,  -182,  -182,
  -125,  -182,  -129,  -182,  -182,  -182,  -121,  -182,  -182,  -182,
  -182,  -182,  -182,  -182,  -182,  -182,  -182,  -182,  -182,   -52,
   -92,  -182,  -182,  -182,  -182,  -172,  -100,  -155,  -157,  -158,
  -159,  -160,  -161,  -162,  -182,  -182,  -182,   -12,   -30,  -182,
  -182,   -87,   -27,  -182,   -29,   -57,   -65,   -66,  -182,  -182,
   -46,  -182,  -182,  -124,  -182,  -182,   -21,  -105,  -182,  -182,
  -182,  -182,  -182,   -83,   -84,   -89,  -182,   -91,  -113,  -114,
  -115,  -116,  -117,  -118,  -163,  -182,   -99,   -97,  -130,  -182,
  -167,   -10,  -182,   -31,   -33,  -182,   -67,  -182,   -78,   -73,
   -75,   -76,  -126,  -127,  -182,   -82,   -88,  -182,  -182,   -90,
  -165,  -182,  -182,   -86,  -182,   -69,   -95,  -182,  -182,   -81,
   -85,  -164,  -182,   -68,  -182,   -74,   -80,   -11,   -94 ]

racc_goto_table = [
    85,    31,   121,   188,   128,   158,    17,   119,   198,   165,
   229,   124,    75,    95,    30,    18,    31,   250,   300,    87,
    99,    18,    97,    28,   138,   151,   140,     1,    18,    30,
   273,     2,   106,     3,     4,     5,     6,     7,    91,    14,
    71,   118,   194,   125,    24,    88,   206,   142,    89,   207,
   165,   260,   230,   255,   256,   257,   314,   315,   130,   215,
   299,   197,   287,   165,   286,   201,   137,   236,    96,   149,
   105,   165,   nil,   325,   229,   144,   145,   212,   nil,   nil,
   305,    31,   131,   148,   nil,   nil,   141,   254,   nil,   308,
   177,   178,   179,   180,    30,    18,   183,   184,   185,   186,
   187,   189,   271,   nil,   275,   nil,   278,   279,   280,   281,
   282,   283,   313,   nil,   nil,   199,   nil,   nil,   nil,   nil,
   nil,   121,   285,   nil,   229,   nil,   247,   nil,   nil,   205,
   252,   293,   nil,   nil,   nil,   290,   209,   204,    18,   213,
   nil,   216,   nil,   165,   165,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   304,   nil,   306,   nil,   nil,   nil,   144,   nil,
   nil,   nil,   nil,   nil,   nil,   296,   nil,   nil,   298,   165,
   nil,   nil,   165,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   311,   nil,   nil,   nil,   130,   nil,   nil,   nil,   nil,   251,
   301,   319,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   264,   nil,   326,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   189,   nil,   nil,   288,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   189,   nil,   nil,   nil,   nil,   199,   nil,
   nil,   nil,   106,   nil,   nil,   301,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   303,   nil,   nil,   nil,   nil,   nil,
   nil,   251,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   189,   316,
   nil,   nil,   nil,   nil,   251,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   328 ]

racc_goto_check = [
    23,    26,    14,    84,    20,    46,    17,    11,    25,    64,
    15,    18,    17,    23,    33,    37,    26,    27,    50,    17,
    73,    37,    70,    30,    21,    72,    21,     1,    37,    33,
    54,     2,    26,     3,     4,     5,     6,     7,    30,     8,
     9,    10,    13,    19,    28,    29,    46,    31,    34,    35,
    64,    36,    39,    43,    44,    45,    47,    48,    23,    46,
    49,    18,    58,    64,    59,    21,    23,    60,    69,    71,
    76,    64,   nil,    50,    15,    23,    23,    72,   nil,   nil,
    54,    26,    37,    73,   nil,   nil,    17,    24,   nil,    27,
    26,    26,    70,    70,    33,    37,    26,    26,    26,    26,
    26,    26,    24,   nil,    24,   nil,    24,    24,    24,    24,
    24,    24,    27,   nil,   nil,    26,   nil,   nil,   nil,   nil,
   nil,    14,    84,   nil,    15,   nil,    11,   nil,   nil,    17,
    20,    25,   nil,   nil,   nil,    84,    26,    37,    37,    26,
   nil,    26,   nil,    64,    64,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    24,   nil,    24,   nil,   nil,   nil,    23,   nil,
   nil,   nil,   nil,   nil,   nil,    46,   nil,   nil,    46,    64,
   nil,   nil,    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    84,   nil,   nil,   nil,    23,   nil,   nil,   nil,   nil,    26,
    14,    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    26,   nil,    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    26,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,    26,   nil,
   nil,   nil,    26,   nil,   nil,    14,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,
   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,    23,
   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    23 ]

racc_goto_pointer = [
   nil,    27,    31,    33,    34,    35,    36,    37,    32,    26,
   -33,   -67,   nil,   -78,   -72,  -145,   nil,    -4,   -64,   -32,
   -72,   -63,   nil,   -18,  -116,  -118,   -11,  -183,    32,    21,
    11,   -45,   nil,     2,    24,   -91,  -156,     5,   nil,  -103,
   nil,   nil,   nil,  -152,  -151,  -150,   -93,  -241,  -240,  -202,
  -244,   nil,   nil,   nil,  -189,   nil,   nil,   nil,  -171,  -168,
   -93,   nil,   nil,   nil,   -89,   nil,   nil,   nil,   nil,    35,
   -11,   -28,   -72,   -13,   nil,   nil,    32,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  -109,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   214,   nil,   nil,
   nil,   nil,   120,   nil,    41,   153,     8,   nil,   nil,   nil,
   nil,   nil,   129,    49,   154,   nil,   174,   nil,   nil,   nil,
   nil,    26,    29,   100,   nil,   nil,   nil,    50,    19,   274,
    20,    21,    79,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   173,   167,   168,   nil,   169,   170,   171,   157,   159,
   161,   162,   163,   164,    64,   166,   172,   175,    35,   nil,
    34,   nil,   nil,   nil,    37,    38,    39,    40,    42,    44,
    45,    46,    47,    52,   nil,    63,    68 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 81, :_reduce_none,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  3, 83, :_reduce_6,
  0, 88, :_reduce_none,
  3, 88, :_reduce_8,
  0, 89, :_reduce_none,
  5, 89, :_reduce_10,
  8, 89, :_reduce_11,
  3, 90, :_reduce_12,
  1, 90, :_reduce_none,
  2, 91, :_reduce_14,
  1, 92, :_reduce_none,
  1, 92, :_reduce_16,
  1, 92, :_reduce_17,
  0, 93, :_reduce_18,
  1, 93, :_reduce_19,
  1, 93, :_reduce_20,
  3, 95, :_reduce_21,
  1, 87, :_reduce_none,
  4, 84, :_reduce_23,
  5, 84, :_reduce_24,
  5, 85, :_reduce_25,
  4, 86, :_reduce_26,
  3, 100, :_reduce_27,
  1, 100, :_reduce_28,
  3, 102, :_reduce_29,
  3, 99, :_reduce_30,
  3, 105, :_reduce_31,
  1, 105, :_reduce_none,
  4, 98, :_reduce_33,
  3, 96, :_reduce_34,
  2, 96, :_reduce_35,
  1, 110, :_reduce_36,
  1, 110, :_reduce_37,
  2, 108, :_reduce_38,
  1, 108, :_reduce_39,
  3, 111, :_reduce_40,
  1, 111, :_reduce_none,
  3, 112, :_reduce_42,
  3, 112, :_reduce_43,
  2, 112, :_reduce_44,
  1, 112, :_reduce_none,
  4, 109, :_reduce_46,
  2, 114, :_reduce_47,
  3, 97, :_reduce_48,
  2, 97, :_reduce_49,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 119, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  3, 120, :_reduce_55,
  4, 120, :_reduce_56,
  5, 121, :_reduce_57,
  1, 122, :_reduce_58,
  2, 122, :_reduce_59,
  1, 122, :_reduce_60,
  2, 122, :_reduce_61,
  1, 122, :_reduce_62,
  1, 122, :_reduce_63,
  2, 122, :_reduce_64,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  2, 124, :_reduce_67,
  4, 125, :_reduce_68,
  1, 127, :_reduce_none,
  0, 101, :_reduce_none,
  2, 101, :_reduce_71,
  0, 115, :_reduce_none,
  3, 115, :_reduce_73,
  3, 129, :_reduce_74,
  1, 129, :_reduce_none,
  1, 130, :_reduce_none,
  0, 116, :_reduce_none,
  2, 116, :_reduce_78,
  1, 131, :_reduce_none,
  6, 132, :_reduce_80,
  5, 132, :_reduce_81,
  4, 133, :_reduce_82,
  3, 133, :_reduce_83,
  1, 134, :_reduce_none,
  3, 134, :_reduce_85,
  3, 107, :_reduce_86,
  1, 107, :_reduce_none,
  4, 135, :_reduce_88,
  3, 135, :_reduce_89,
  4, 136, :_reduce_90,
  3, 136, :_reduce_91,
  2, 137, :_reduce_92,
  1, 117, :_reduce_93,
  3, 128, :_reduce_94,
  1, 128, :_reduce_none,
  1, 126, :_reduce_none,
  3, 126, :_reduce_97,
  1, 138, :_reduce_none,
  3, 138, :_reduce_99,
  2, 139, :_reduce_100,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 140, :_reduce_none,
  1, 142, :_reduce_none,
  3, 142, :_reduce_105,
  1, 142, :_reduce_none,
  1, 143, :_reduce_none,
  1, 143, :_reduce_none,
  1, 143, :_reduce_none,
  1, 143, :_reduce_none,
  1, 143, :_reduce_none,
  1, 143, :_reduce_none,
  3, 145, :_reduce_113,
  3, 145, :_reduce_114,
  3, 145, :_reduce_115,
  3, 145, :_reduce_116,
  3, 145, :_reduce_117,
  3, 145, :_reduce_118,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  3, 148, :_reduce_123,
  5, 148, :_reduce_124,
  4, 148, :_reduce_125,
  6, 148, :_reduce_126,
  4, 152, :_reduce_127,
  1, 151, :_reduce_128,
  2, 151, :_reduce_129,
  4, 153, :_reduce_130,
  1, 149, :_reduce_131,
  2, 149, :_reduce_132,
  3, 106, :_reduce_133,
  3, 106, :_reduce_134,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_137,
  3, 150, :_reduce_138,
  3, 150, :_reduce_139,
  1, 150, :_reduce_none,
  2, 154, :_reduce_141,
  1, 154, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  3, 156, :_reduce_146,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 160, :_reduce_151,
  3, 94, :_reduce_152,
  1, 94, :_reduce_none,
  1, 113, :_reduce_none,
  4, 158, :_reduce_155,
  1, 158, :_reduce_none,
  4, 163, :_reduce_157,
  4, 163, :_reduce_158,
  4, 163, :_reduce_159,
  4, 163, :_reduce_160,
  4, 163, :_reduce_161,
  4, 163, :_reduce_162,
  3, 147, :_reduce_163,
  4, 147, :_reduce_164,
  4, 141, :_reduce_165,
  1, 164, :_reduce_none,
  3, 164, :_reduce_167,
  1, 161, :_reduce_168,
  1, 161, :_reduce_169,
  1, 155, :_reduce_170,
  1, 155, :_reduce_171,
  1, 103, :_reduce_172,
  3, 162, :_reduce_173,
  2, 162, :_reduce_174,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_177,
  1, 144, :_reduce_178,
  1, 144, :_reduce_179,
  1, 165, :_reduce_none,
  2, 166, :_reduce_181 ]

racc_reduce_n = 182

racc_shift_n = 329

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :FETCH => 4,
  :FIRST => 5,
  :unsigned_integer => 6,
  :ROWS => 7,
  :ONLY => 8,
  :OFFSET => 9,
  :NEXT => 10,
  :comma => 11,
  :built_in_function => 12,
  :ASC => 13,
  :DESC => 14,
  :left_paren => 15,
  :right_paren => 16,
  :INSERT => 17,
  :INTO => 18,
  :UPDATE => 19,
  :SET => 20,
  :DELETE => 21,
  :FROM => 22,
  :equals_operator => 23,
  :VALUES => 24,
  :SELECT => 25,
  :asterisk => 26,
  :DISTINCT => 27,
  :period => 28,
  :AS => 29,
  :CROSS => 30,
  :JOIN => 31,
  :INNER => 32,
  :LEFT => 33,
  :OUTER => 34,
  :RIGHT => 35,
  :FULL => 36,
  :ON => 37,
  :USING => 38,
  :WHERE => 39,
  :GROUP => 40,
  :HAVING => 41,
  :NOT => 42,
  :BETWEEN => 43,
  :AND => 44,
  :IN => 45,
  :LIKE => 46,
  :IS => 47,
  :NULL => 48,
  :EXISTS => 49,
  :identifier => 50,
  :OR => 51,
  :not_equals_operator => 52,
  :less_than_operator => 53,
  :greater_than_operator => 54,
  :less_than_or_equals_operator => 55,
  :greater_than_or_equals_operator => 56,
  :CASE => 57,
  :END => 58,
  :ELSE => 59,
  :WHEN => 60,
  :THEN => 61,
  :plus_sign => 62,
  :minus_sign => 63,
  :solidus => 64,
  :CURRENT_USER => 65,
  :COUNT => 66,
  :AVG => 67,
  :MAX => 68,
  :MIN => 69,
  :SUM => 70,
  :IFNULL => 71,
  :unsigned_float => 72,
  :quote => 73,
  :character_string_literal => 74,
  :variable => 75,
  :true_literal => 76,
  :false_literal => 77,
  :DATE => 78,
  :date_string => 79 }

racc_nt_base = 80

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "FETCH",
  "FIRST",
  "unsigned_integer",
  "ROWS",
  "ONLY",
  "OFFSET",
  "NEXT",
  "comma",
  "built_in_function",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "UPDATE",
  "SET",
  "DELETE",
  "FROM",
  "equals_operator",
  "VALUES",
  "SELECT",
  "asterisk",
  "DISTINCT",
  "period",
  "AS",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "CASE",
  "END",
  "ELSE",
  "WHEN",
  "THEN",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "IFNULL",
  "unsigned_float",
  "quote",
  "character_string_literal",
  "variable",
  "true_literal",
  "false_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "update_specification",
  "delete_specification",
  "query_expression",
  "order_by_clause",
  "fetch_only_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_reference",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "assign_list",
  "where_clause",
  "assign_column",
  "column_name",
  "row_value_constructor",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "distinct_select_list",
  "table_expression",
  "select_list",
  "select_sublist",
  "derived_column",
  "qualifier",
  "from_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "row_subquery",
  "between_predicate",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_function",
  "boolean_primary",
  "predicate",
  "boolean_literal",
  "comparison_predicate",
  "row_value_constructor_element",
  "general_function",
  "case_expression",
  "when_expressions",
  "term",
  "when_value_expressions",
  "when_value_expression",
  "when_expression",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "general_literal",
  "general_set_function",
  "argument_list",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 15)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1], val[2])
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.racc', 20)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2])
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'parser.racc', 24)
  def _reduce_10(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(0, val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 25)
  def _reduce_11(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(val[1], val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 28)
  def _reduce_12(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.racc', 32)
  def _reduce_14(val, _values, result)
     result = val[1].new(val[0])
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::BuiltInFunction.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 37)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Ascending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Ascending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 42)
  def _reduce_20(val, _values, result)
     result = SQLParser::Statement::Descending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1])
    result
  end
.,.,

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_24(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_25(val, _values, result)
     result = SQLParser::Statement::Update.new(val[1], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::Delete.new(val[2], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_27(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_28(val, _values, result)
     result = Array(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::AssignColumn.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_31(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 32 omitted

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_33(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_34(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::All.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_37(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_38(val, _values, result)
     result = SQLParser::Statement::Distinct.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_39(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_40(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 41 omitted

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_42(val, _values, result)
     result = SQLParser::Statement::All.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 97)
  def _reduce_43(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 98)
  def _reduce_44(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1])
    result
  end
.,.,

# reduce 45 omitted

module_eval(<<'.,.,', 'parser.racc', 102)
  def _reduce_46(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_48(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_49(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1])
    result
  end
.,.,

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_57(val, _values, result)
     result = val[1].new(val[0], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_58(val, _values, result)
     result = SQLParser::Statement::InnerJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::LeftJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_61(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 132)
  def _reduce_62(val, _values, result)
     result = SQLParser::Statement::RightJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_63(val, _values, result)
     result = SQLParser::Statement::FullJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 134)
  def _reduce_64(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin
    result
  end
.,.,

# reduce 65 omitted

# reduce 66 omitted

module_eval(<<'.,.,', 'parser.racc', 141)
  def _reduce_67(val, _values, result)
     result = SQLParser::Statement::On.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 144)
  def _reduce_68(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2])
    result
  end
.,.,

# reduce 69 omitted

# reduce 70 omitted

module_eval(<<'.,.,', 'parser.racc', 151)
  def _reduce_71(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1])
    result
  end
.,.,

# reduce 72 omitted

module_eval(<<'.,.,', 'parser.racc', 155)
  def _reduce_73(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 158)
  def _reduce_74(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_78(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1])
    result
  end
.,.,

# reduce 79 omitted

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 174)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_82(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_83(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2])
    result
  end
.,.,

# reduce 84 omitted

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::InValueList.new(Array(val[1]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_86(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 87 omitted

module_eval(<<'.,.,', 'parser.racc', 192)
  def _reduce_88(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 193)
  def _reduce_89(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 196)
  def _reduce_90(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_91(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 200)
  def _reduce_92(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 204)
  def _reduce_93(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 207)
  def _reduce_94(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 95 omitted

# reduce 96 omitted

module_eval(<<'.,.,', 'parser.racc', 213)
  def _reduce_97(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2])
    result
  end
.,.,

# reduce 98 omitted

module_eval(<<'.,.,', 'parser.racc', 218)
  def _reduce_99(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 221)
  def _reduce_100(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1])
    result
  end
.,.,

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_105(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_113(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_114(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_115(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 247)
  def _reduce_116(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_117(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_118(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2])
    result
  end
.,.,

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_123(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(nil,val[1], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_124(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(nil,val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_125(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(val[1], val[2], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 264)
  def _reduce_126(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(val[1], val[2], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 268)
  def _reduce_127(val, _values, result)
     result = SQLParser::Statement::WhenClause.new(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 271)
  def _reduce_128(val, _values, result)
     result = [ val[0] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 272)
  def _reduce_129(val, _values, result)
     result = [ *val[0], val[1] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_130(val, _values, result)
     result = SQLParser::Statement::WhenClause.new(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_131(val, _values, result)
     result = [ val[0] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 279)
  def _reduce_132(val, _values, result)
     result = [ *val[0], val[1] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_133(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_134(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2])
    result
  end
.,.,

# reduce 135 omitted

# reduce 136 omitted

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::Null.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_138(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_139(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2])
    result
  end
.,.,

# reduce 140 omitted

module_eval(<<'.,.,', 'parser.racc', 294)
  def _reduce_141(val, _values, result)
     result = val[0].new(val[1])
    result
  end
.,.,

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_146(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_151(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_152(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2])
    result
  end
.,.,

# reduce 153 omitted

# reduce 154 omitted

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_155(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new)
    result
  end
.,.,

# reduce 156 omitted

module_eval(<<'.,.,', 'parser.racc', 326)
  def _reduce_157(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_158(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_159(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_160(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 330)
  def _reduce_161(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 331)
  def _reduce_162(val, _values, result)
     result = SQLParser::Statement::FunctionCall.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 335)
  def _reduce_163(val, _values, result)
     result = SQLParser::Statement::FunctionCall.new(val[0], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 336)
  def _reduce_164(val, _values, result)
     result = SQLParser::Statement::FunctionCall.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 339)
  def _reduce_165(val, _values, result)
     result = SQLParser::Statement::BooleanFunction.new(val[0], val[2])
    result
  end
.,.,

# reduce 166 omitted

module_eval(<<'.,.,', 'parser.racc', 343)
  def _reduce_167(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 347)
  def _reduce_168(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 348)
  def _reduce_169(val, _values, result)
    result = SQLParser::Statement::Float.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 351)
  def _reduce_170(val, _values, result)
     result = SQLParser::Statement::UnaryPlus
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 352)
  def _reduce_171(val, _values, result)
     result = SQLParser::Statement::UnaryMinus
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 356)
  def _reduce_172(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 360)
  def _reduce_173(val, _values, result)
     result = SQLParser::Statement::String.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 361)
  def _reduce_174(val, _values, result)
     result = SQLParser::Statement::String.new('')
    result
  end
.,.,

# reduce 175 omitted

# reduce 176 omitted

module_eval(<<'.,.,', 'parser.racc', 364)
  def _reduce_177(val, _values, result)
     result = SQLParser::Statement::Variable.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 367)
  def _reduce_178(val, _values, result)
     result = SQLParser::Statement::True.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 368)
  def _reduce_179(val, _values, result)
     result = SQLParser::Statement::False.new
    result
  end
.,.,

# reduce 180 omitted

module_eval(<<'.,.,', 'parser.racc', 374)
  def _reduce_181(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module SQLParser
